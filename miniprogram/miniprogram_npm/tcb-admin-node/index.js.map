{"version":3,"sources":["index.js","src\\storage\\index.js","src\\utils\\httpRequest.js","src\\utils\\auth.js","package.json","src\\db\\index.js","src\\db\\db.js","src\\db\\geo\\index.js","src\\db\\geo\\point.js","src\\db\\validate.js","src\\db\\constant.js","src\\db\\util.js","src\\db\\serverDate\\index.js","src\\db\\helper\\symbol.js","src\\db\\utils\\symbol.js","src\\db\\collection.js","src\\db\\document.js","src\\db\\request.js","src\\db\\serializer\\update.js","src\\db\\commands\\update.js","src\\db\\utils\\type.js","src\\db\\operator-map.js","src\\db\\commands\\query.js","src\\db\\commands\\logic.js","src\\db\\serializer\\common.js","src\\db\\serializer\\datatype.js","src\\db\\query.js","src\\db\\serializer\\query.js","src\\db\\command.js","src\\db\\regexp\\index.js","src\\functions\\index.js","src\\wx\\index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,ACHA,AJYA,AENA,ADGA;AFOA,AIZA,ACHA,AJYA,AENA,ADGA;AFOA,AIZA,ACHA,AJYA,AENA,ADGA;AFOA,AIZA,AENA,ADGA,AJYA,AENA,ADGA;AFOA,AIZA,AENA,ADGA,AJYA,AENA,ADGA;AFOA,AIZA,AENA,ADGA,AJYA,AENA,ADGA;AFOA,AIZA,AENA,ACHA,AFMA,AJYA,AENA,ADGA;AFOA,AIZA,AENA,ACHA,ANkBA,AENA,ADGA;AFOA,AIZA,AENA,ACHA,ANkBA,AENA,ADGA;AFOA,AIZA,AENA,ACHA,ACHA,APqBA,AENA,ADGA;AFOA,AIZA,AENA,ACHA,ACHA,APqBA,AENA,ADGA;AFOA,AIZA,AENA,ACHA,ACHA,APqBA,AENA,ADGA;AFOA,AIZA,AENA,ACHA,ACHA,ACHA,ARwBA,AENA,ADGA;AFOA,AIZA,AENA,AENA,ACHA,ARwBA,AENA,ADGA;AFOA,AIZA,AENA,AENA,ACHA,ARwBA,AENA,ADGA;AFOA,AIZA,AMlBA,AJYA,AENA,ACHA,ARwBA,AENA,ADGA;AFOA,AIZA,AMlBA,AJYA,AENA,ACHA,ARwBA,AENA,ADGA;AFOA,AIZA,AMlBA,AJYA,AENA,ACHA,ARwBA,AENA,ADGA;AFOA,AIZA,AMlBA,AJYA,AENA,AGTA,AFMA,ARwBA,AENA,ADGA;AFOA,AIZA,AMlBA,AJYA,AENA,AGTA,AFMA,ARwBA,AENA,ADGA;AFOA,AIZA,AMlBA,AJYA,AENA,AGTA,AFMA,ARwBA,AENA,ADGA;AFOA,AIZA,AMlBA,AJYA,AENA,AIZA,ADGA,AFMA,ARwBA,AENA,ADGA;AFOA,AIZA,AMlBA,AJYA,AENA,AIZA,ADGA,AFMA,ARwBA,AENA,ADGA;AFOA,AIZA,AMlBA,AJYA,AENA,AIZA,ADGA,AFMA,ARwBA,AENA,ADGA;AFOA,AIZA,AMlBA,AJYA,AENA,AKfA,ADGA,ADGA,AFMA,ARwBA,AENA,ADGA;AFOA,AIZA,AMlBA,AJYA,AENA,AKfA,ADGA,ADGA,AFMA,ARwBA,AENA,ADGA;AFOA,AIZA,AMlBA,AJYA,AENA,AKfA,ADGA,ADGA,AFMA,ARwBA,AENA,ADGA;AFOA,AIZA,AMlBA,AJYA,AENA,AKfA,ADGA,ADGA,AGTA,ALeA,ARwBA,AENA,ADGA;AFOA,AIZA,AMlBA,AJYA,AENA,AKfA,ADGA,ADGA,AGTA,ALeA,ARwBA,AENA,ADGA;AFOA,AIZA,AMlBA,AJYA,AENA,AKfA,ADGA,ADGA,AGTA,ALeA,ARwBA,AENA,ADGA;AFOA,AIZA,AWjCA,ALeA,AJYA,AENA,AKfA,ADGA,ADGA,AGTA,ALeA,ARwBA,AENA,ADGA;AFOA,AIZA,AWjCA,ALeA,AJYA,AENA,AKfA,ADGA,ADGA,AGTA,ALeA,ARwBA,AENA,ADGA;AFOA,AIZA,AWjCA,ALeA,AJYA,AENA,AKfA,ADGA,ADGA,AGTA,ALeA,ARwBA,AENA,ADGA;AFOA,AIZA,AWjCA,ALeA,AJYA,AU9BA,ARwBA,AKfA,ADGA,ADGA,AGTA,ALeA,ARwBA,AENA,ADGA;AFOA,AIZA,AWjCA,ALeA,AJYA,AU9BA,ARwBA,AKfA,ADGA,ADGA,AGTA,ALeA,ARwBA,AENA,ADGA;AFOA,AIZA,AWjCA,ALeA,AMlBA,ARwBA,AKfA,ADGA,ADGA,AGTA,ALeA,ARwBA,AENA,ADGA;AFOA,AIZA,AWjCA,ALeA,AMlBA,ARwBA,AKfA,AIZA,ALeA,ADGA,AGTA,ALeA,ARwBA,AENA,ADGA;AFOA,AIZA,AWjCA,ALeA,AMlBA,ARwBA,AKfA,AIZA,ALeA,ADGA,AGTA,ALeA,ARwBA,AENA,ADGA;AFOA,AIZA,AWjCA,ALeA,AMlBA,ARwBA,AKfA,AIZA,ALeA,ADGA,AGTA,ALeA,ARwBA,AENA,ADGA;AFOA,AIZA,AWjCA,ALeA,AMlBA,ARwBA,AS3BA,ACHA,ANkBA,ADGA,AGTA,ALeA,ARwBA,AENA,ADGA;AFOA,AIZA,AWjCA,ALeA,AMlBA,ARwBA,AS3BA,ACHA,ANkBA,ADGA,AGTA,ALeA,ARwBA,AENA,ADGA;AFOA,AIZA,AWjCA,ALeA,AMlBA,ARwBA,AS3BA,ACHA,ANkBA,ADGA,AGTA,ALeA,ARwBA,AENA,ADGA;AFOA,AIZA,AWjCA,AIZA,AT2BA,AMlBA,ARwBA,AS3BA,ACHA,ANkBA,ADGA,AGTA,ALeA,ARwBA,AENA,ADGA;AFOA,AIZA,AWjCA,AIZA,AT2BA,AMlBA,ACHA,ACHA,ANkBA,ADGA,AGTA,ALeA,ARwBA,AENA,ADGA;AFOA,AIZA,AWjCA,AIZA,AT2BA,AMlBA,ACHA,ACHA,ANkBA,ADGA,AGTA,ALeA,ARwBA,AENA,ADGA;AFOA,AIZA,AWjCA,AIZA,AT2BA,AMlBA,ACHA,ACHA,APqBA,AGTA,AMlBA,AXiCA,ARwBA,AENA,ADGA;AFOA,AIZA,AWjCA,AIZA,AT2BA,AMlBA,ACHA,ACHA,APqBA,AGTA,AMlBA,AXiCA,ARwBA,AENA,ADGA;AFOA,AIZA,AWjCA,AIZA,AT2BA,AMlBA,ACHA,ACHA,APqBA,AGTA,AMlBA,AXiCA,ARwBA,AENA,ADGA;AFOA,AIZA,AWjCA,AIZA,AT2BA,AMlBA,AKfA,AJYA,ACHA,APqBA,AGTA,AMlBA,AXiCA,ARwBA,AENA,ADGA;AFOA,AIZA,AWjCA,AIZA,AT2BA,AMlBA,AKfA,AJYA,ACHA,APqBA,AGTA,AMlBA,AXiCA,ARwBA,AENA,ADGA;AFOA,AIZA,AWjCA,AIZA,AT2BA,AMlBA,AKfA,AJYA,ACHA,APqBA,AGTA,AMlBA,AXiCA,ARwBA,AENA,ADGA;AFOA,AIZA,AkBtDA,AHSA,AT2BA,AMlBA,AKfA,AJYA,ACHA,APqBA,AGTA,AMlBA,AXiCA,ARwBA,AENA,ADGA;AFOA,AIZA,AkBtDA,AHSA,AT2BA,AMlBA,AKfA,AJYA,ACHA,APqBA,AGTA,AMlBA,AXiCA,ARwBA,AENA,ADGA;AFOA,AIZA,AkBtDA,AHSA,AT2BA,AMlBA,AKfA,AJYA,ACHA,APqBA,AGTA,AMlBA,AXiCA,ARwBA,AENA,ADGA;AFOA,AIZA,AmBzDA,ADGA,AHSA,AT2BA,AMlBA,AKfA,AJYA,ACHA,APqBA,AGTA,AMlBA,AXiCA,ARwBA,AENA,ADGA;AFOA,AIZA,AmBzDA,ADGA,AHSA,AT2BA,AMlBA,AKfA,AJYA,ACHA,APqBA,AGTA,AMlBA,AXiCA,ARwBA,AENA,ADGA;AFOA,AIZA,AmBzDA,ADGA,AHSA,AT2BA,AMlBA,AKfA,AJYA,ACHA,APqBA,AGTA,AMlBA,AXiCA,ARwBA,AENA,ADGA;AFOA,AIZA,AmBzDA,ADGA,AHSA,AT2BA,AMlBA,AKfA,AJYA,AOrBA,ANkBA,APqBA,AGTA,AMlBA,AXiCA,ARwBA,AENA,ADGA;AFOA,AIZA,AmBzDA,ADGA,AHSA,AT2BA,AMlBA,AKfA,AJYA,AOrBA,ANkBA,APqBA,AGTA,AMlBA,AXiCA,ARwBA,AENA,ADGA;AFOA,AIZA,AmBzDA,ADGA,AHSA,AT2BA,AMlBA,AKfA,AJYA,AOrBA,ANkBA,APqBA,AGTA,AMlBA,AXiCA,ARwBA,AENA,ADGA;AFOA,AIZA,AmBzDA,ADGA,AHSA,AT2BA,AMlBA,AKfA,AJYA,AOrBA,ACHA,APqBA,APqBA,AGTA,AMlBA,AXiCA,ARwBA,AENA,ADGA;AFOA,AIZA,AmBzDA,ADGA,AHSA,AT2BA,AMlBA,AKfA,AJYA,AOrBA,ACHA,APqBA,APqBA,AGTA,AMlBA,AXiCA,ARwBA,AENA,ADGA;AFOA,AIZA,AmBzDA,ADGA,AHSA,AT2BA,AMlBA,AKfA,AJYA,AOrBA,ACHA,APqBA,APqBA,AGTA,AMlBA,AXiCA,ARwBA,AENA,ADGA;AFOA,AIZA,AmBzDA,ADGA,AHSA,AT2BA,AMlBA,AKfA,AKfA,AT2BA,AOrBA,ACHA,APqBA,APqBA,AGTA,AMlBA,AXiCA,ARwBA,AENA,ADGA;AFOA,AIZA,AmBzDA,ADGA,AHSA,AT2BA,AMlBA,AKfA,AKfA,AT2BA,AOrBA,ACHA,APqBA,APqBA,AGTA,AMlBA,AXiCA,ARwBA,AENA,ADGA;AFOA,AIZA,AmBzDA,ADGA,AHSA,AT2BA,AMlBA,AKfA,AKfA,AT2BA,AOrBA,ACHA,APqBA,APqBA,AGTA,AMlBA,AXiCA,ARwBA,AENA,ADGA;AFOA,AIZA,AmBzDA,ADGA,AHSA,AT2BA,AMlBA,AKfA,AKfA,AT2BA,AOrBA,ACHA,AENA,AT2BA,APqBA,AGTA,AMlBA,AXiCA,ARwBA,AENA,ADGA;AFOA,AIZA,AmBzDA,ADGA,AHSA,AT2BA,AMlBA,AKfA,AKfA,AT2BA,AOrBA,ACHA,AENA,AT2BA,APqBA,AS3BA,AXiCA,ARwBA,AENA,ADGA;AFOA,AIZA,AmBzDA,ADGA,AHSA,AT2BA,AMlBA,AKfA,AKfA,AT2BA,AOrBA,ACHA,AENA,AT2BA,APqBA,AFMA,ARwBA,AENA,ADGA;AFOA,AIZA,AwBxEA,ALeA,ADGA,AHSA,AT2BA,AMlBA,AKfA,AKfA,AT2BA,AOrBA,ACHA,AENA,AT2BA,APqBA,AV8BA,AENA,ADGA;AFOA,AIZA,AwBxEA,ALeA,ADGA,AHSA,AT2BA,AMlBA,AKfA,AKfA,AT2BA,AOrBA,ACHA,AENA,AT2BA,APqBA,AV8BA,AENA,ADGA;AFOA,A4BpFA,ALeA,ADGA,AHSA,AT2BA,AMlBA,AKfA,AKfA,AT2BA,AOrBA,ACHA,AENA,AT2BA,APqBA,AV8BA,AENA,ADGA;AFOA,A4BpFA,ALeA,ADGA,AHSA,AT2BA,AMlBA,AU9BA,AGTA,AZoCA,AOrBA,ACHA,AENA,AT2BA,APqBA,AV8BA,AENA,ADGA;AFOA,A4BpFA,ALeA,ADGA,AHSA,AT2BA,AMlBA,AU9BA,AGTA,AZoCA,AOrBA,ACHA,AENA,AT2BA,APqBA,AV8BA,AENA,ADGA;AFOA,A4BpFA,ALeA,ADGA,AHSA,AT2BA,AMlBA,AU9BA,AGTA,AZoCA,AOrBA,ACHA,AENA,AT2BA,APqBA,AV8BA,AENA,ADGA;AFOA,A4BpFA,ALeA,ADGA,AHSA,AHSA,AU9BA,AGTA,AZoCA,AOrBA,ACHA,AENA,AT2BA,APqBA,AmBzDA,A7BuFA,AENA,ADGA;AFOA,A4BpFA,ALeA,ADGA,AHSA,AHSA,AU9BA,AGTA,AZoCA,AOrBA,ACHA,AENA,AT2BA,APqBA,AmBzDA,A7BuFA,AENA,ADGA;AFOA,A4BpFA,ALeA,ADGA,AHSA,AHSA,AU9BA,AGTA,AZoCA,AOrBA,ACHA,AENA,AT2BA,APqBA,AmBzDA,A7BuFA,AENA,ADGA;A0B7EA,ALeA,ADGA,AHSA,AHSA,AU9BA,AGTA,ALeA,ACHA,AENA,AT2BA,APqBA,AmBzDA,A7BuFA,AENA,ADGA,A6BvFA;AHUA,ALeA,ADGA,AHSA,AHSA,AU9BA,AGTA,ALeA,ACHA,AENA,AT2BA,APqBA,AmBzDA,A7BuFA,AENA,ADGA,A6BvFA;AHUA,ALeA,ADGA,AHSA,AHSA,AU9BA,AGTA,ALeA,ACHA,AENA,AT2BA,APqBA,AmBzDA,A7BuFA,AENA,ADGA,A6BvFA;AHUA,ALeA,ADGA,AHSA,AHSA,AU9BA,AGTA,ALeA,ACHA,AENA,AT2BA,APqBA,AmBzDA,A7BuFA,AENA,ADGA,A6BvFA;AHUA,ALeA,ADGA,AHSA,AHSA,AU9BA,AGTA,ALeA,ACHA,AENA,AT2BA,APqBA,AmBzDA,A7BuFA,AENA,ADGA,A6BvFA;AHUA,ALeA,ADGA,AHSA,AHSA,AU9BA,AGTA,ALeA,ACHA,AENA,AT2BA,APqBA,AmBzDA,A7BuFA,AENA,ADGA,A6BvFA;AHUA,ALeA,ADGA,AHSA,AHSA,AU9BA,AGTA,ALeA,ACHA,AENA,AT2BA,APqBA,AmBzDA,A7BuFA,AENA,ADGA,A6BvFA;AHUA,ALeA,ADGA,AHSA,AHSA,AU9BA,AGTA,ALeA,ACHA,AENA,AT2BA,APqBA,AmBzDA,A7BuFA,AENA,ADGA,A6BvFA;AHUA,ALeA,ADGA,AHSA,AHSA,AU9BA,AGTA,ALeA,ACHA,AENA,AT2BA,APqBA,AmBzDA,A7BuFA,AENA,ADGA,A6BvFA;AHUA,ALeA,ADGA,AHSA,AHSA,AU9BA,AGTA,ALeA,ACHA,AENA,AT2BA,APqBA,AmBzDA,A7BuFA,AENA,ADGA,A6BvFA;AHUA,ALeA,ADGA,AHSA,AHSA,AU9BA,AGTA,ALeA,ACHA,AENA,AT2BA,APqBA,AmBzDA,A7BuFA,AENA,ADGA,A6BvFA;AHUA,ALeA,ADGA,AHSA,AHSA,AU9BA,AGTA,ALeA,ACHA,AENA,AT2BA,APqBA,AmBzDA,A7BuFA,AENA,ADGA,A6BvFA;AHUA,ALeA,ADGA,AHSA,AHSA,AU9BA,AGTA,ALeA,ACHA,AENA,AT2BA,APqBA,AmBzDA,A7BuFA,AENA,ADGA,A6BvFA;AHUA,ALeA,ADGA,AHSA,AHSA,AU9BA,AGTA,ALeA,ACHA,AENA,AT2BA,APqBA,AmBzDA,A7BuFA,AENA,ADGA,A6BvFA;AHUA,ALeA,ADGA,AHSA,AHSA,AU9BA,AGTA,ALeA,ACHA,AENA,AT2BA,APqBA,AmBzDA,A7BuFA,AENA,ADGA,A6BvFA;AHUA,ALeA,ADGA,ANkBA,AU9BA,AGTA,ALeA,ACHA,AENA,AT2BA,APqBA,AmBzDA,A7BuFA,AENA,ADGA,A6BvFA;AHUA,ALeA,ADGA,ANkBA,AU9BA,AGTA,ALeA,ACHA,AENA,AT2BA,APqBA,AmBzDA,A7BuFA,AENA,ADGA,A6BvFA;AHUA,ALeA,ADGA,ANkBA,AU9BA,AGTA,ALeA,ACHA,AENA,AT2BA,APqBA,AmBzDA,A7BuFA,AENA,ADGA,A6BvFA;AHUA,ALeA,ADGA,ANkBA,AU9BA,AGTA,ALeA,ACHA,AENA,AT2BA,APqBA,AmBzDA,A7BuFA,AENA,ADGA,A6BvFA;AHUA,ALeA,ADGA,ANkBA,AU9BA,AGTA,ALeA,ACHA,AENA,AT2BA,APqBA,AmBzDA,A7BuFA,AENA,ADGA,A6BvFA;AHUA,ALeA,ADGA,ANkBA,AU9BA,AGTA,ALeA,ACHA,AENA,AT2BA,APqBA,AmBzDA,A7BuFA,AENA,ADGA,A6BvFA;AHUA,ALeA,ADGA,ANkBA,AU9BA,AFMA,ACHA,AENA,AT2BA,APqBA,AmBzDA,A7BuFA,AENA,ADGA,A6BvFA;AHUA,ALeA,ADGA,ANkBA,AU9BA,AFMA,ACHA,AENA,AT2BA,AYpCA,A7BuFA,AENA,ADGA,A6BvFA;AHUA,ALeA,ADGA,ANkBA,AU9BA,AFMA,ACHA,AENA,AT2BA,AYpCA,A7BuFA,AENA,ADGA,A6BvFA;AHUA,ALeA,ADGA,ANkBA,AU9BA,AFMA,ACHA,AENA,AT2BA,AYpCA,A7BuFA,AENA,ADGA,A6BvFA;AHUA,ALeA,ADGA,ANkBA,AU9BA,AFMA,ACHA,AENA,AT2BA,AYpCA,A7BuFA,AENA,ADGA,A6BvFA;AHUA,ALeA,ADGA,ANkBA,AU9BA,AFMA,ACHA,AENA,AT2BA,AYpCA,A7BuFA,AENA,A4BpFA;AHUA,ALeA,ADGA,ANkBA,AU9BA,AFMA,ACHA,AENA,AT2BA,AYpCA,A7BuFA,AENA,A4BpFA;AHUA,ALeA,ADGA,ANkBA,AU9BA,AFMA,ACHA,AENA,AT2BA,AYpCA,A7BuFA,AENA,A4BpFA;AHUA,ALeA,ADGA,ANkBA,AU9BA,AFMA,ACHA,AENA,AT2BA,AYpCA,A7BuFA,AENA,A4BpFA;AHUA,ALeA,ADGA,ANkBA,AU9BA,AFMA,ACHA,AENA,AT2BA,AYpCA,A7BuFA,AENA,A4BpFA;AHUA,ALeA,ADGA,ANkBA,AU9BA,AFMA,ACHA,AENA,AT2BA,AYpCA,A7BuFA,AENA,A4BpFA;AHUA,ALeA,ADGA,ANkBA,AU9BA,AFMA,ACHA,AENA,AT2BA,AYpCA,A7BuFA,AENA,A4BpFA;AHUA,ALeA,ADGA,ANkBA,AU9BA,AFMA,ACHA,AENA,AT2BA,AYpCA,A7BuFA,AENA,A4BpFA;AHUA,ALeA,ADGA,ANkBA,AU9BA,AFMA,ACHA,AENA,AT2BA,AYpCA,A7BuFA,AENA,A4BpFA;AHUA,ALeA,ADGA,ANkBA,AU9BA,AFMA,ACHA,AENA,AT2BA,AYpCA,A7BuFA,AENA,A4BpFA;AHUA,ALeA,ADGA,ANkBA,AU9BA,AFMA,ACHA,AENA,AT2BA,AYpCA,A7BuFA,AENA,A4BpFA;AHUA,ALeA,ADGA,ANkBA,AU9BA,AFMA,ACHA,AENA,AT2BA,AYpCA,A7BuFA,AENA,A4BpFA;AHUA,ALeA,ADGA,ANkBA,AU9BA,AFMA,ACHA,AENA,AT2BA,AYpCA,A7BuFA,AENA,A4BpFA;AHUA,ALeA,ADGA,ANkBA,AU9BA,AFMA,ACHA,AENA,AT2BA,AYpCA,A7BuFA,AENA,A4BpFA;AHUA,ALeA,ADGA,ANkBA,AU9BA,AFMA,ACHA,AENA,AT2BA,AYpCA,A7BuFA,AENA,A4BpFA;AHUA,ALeA,ADGA,ANkBA,AU9BA,AFMA,ACHA,AENA,AT2BA,AYpCA,A7BuFA,AENA,A4BpFA;AHUA,ALeA,ADGA,ANkBA,AU9BA,AFMA,ACHA,AENA,AT2BA,AYpCA,A7BuFA,AENA;AyB1EA,ALeA,ADGA,ANkBA,AU9BA,AFMA,ACHA,AENA,AT2BA,AYpCA,A7BuFA,AENA;AyB1EA,ALeA,ADGA,ANkBA,AU9BA,AFMA,ACHA,AENA,AT2BA,AYpCA,A7BuFA,AENA;AyB1EA,ALeA,ADGA,ANkBA,AU9BA,AFMA,ACHA,AENA,AT2BA,AYpCA,A7BuFA,AENA;AyB1EA,ALeA,ADGA,ANkBA,AU9BA,AFMA,ACHA,AENA,AT2BA,AYpCA,A7BuFA,AENA;AyB1EA,ALeA,ADGA,ANkBA,AU9BA,AFMA,ACHA,AENA,AT2BA,AYpCA,A7BuFA,AENA;AyB1EA,ANkBA,ANkBA,AU9BA,AFMA,ACHA,AENA,AT2BA,AYpCA,A7BuFA,AENA;AyB1EA,ANkBA,ANkBA,AU9BA,AFMA,ACHA,AENA,AT2BA,AYpCA,A7BuFA,AENA;AyB1EA,ANkBA,ANkBA,AU9BA,AFMA,ACHA,AENA,AT2BA,AYpCA,A7BuFA,AENA;AyB1EA,ANkBA,ANkBA,AU9BA,AFMA,ACHA,AENA,AT2BA,AjBmDA,AENA;AyB1EA,ANkBA,ANkBA,AU9BA,AFMA,ACHA,AENA,AT2BA,AjBmDA,AENA;AyB1EA,ANkBA,ANkBA,AU9BA,AFMA,ACHA,AENA,AT2BA,AjBmDA,AENA;AyB1EA,AZoCA,AU9BA,AFMA,ACHA,AENA,AT2BA,AjBmDA,AENA;AyB1EA,AZoCA,AU9BA,AFMA,ACHA,AENA,AT2BA,AjBmDA,AENA;AyB1EA,AZoCA,AU9BA,AFMA,ACHA,AENA,AT2BA,AjBmDA,AENA;AyB1EA,AZoCA,AU9BA,AFMA,ACHA,AENA,AT2BA,AjBmDA,AENA;AyB1EA,AZoCA,AU9BA,AFMA,ACHA,AENA,AT2BA,AjBmDA,AENA;AatCA,AU9BA,AFMA,ACHA,AENA,AT2BA,AjBmDA,AENA;AatCA,AU9BA,AFMA,ACHA,AENA,AT2BA,AjBmDA,AENA;AatCA,AU9BA,AFMA,ACHA,AENA,AT2BA,AjBmDA,AENA;AatCA,AU9BA,AFMA,ACHA,AENA,AT2BA,AjBmDA,AENA;AatCA,AU9BA,AFMA,ACHA,AENA,AT2BA,AjBmDA,AENA;AatCA,AU9BA,AFMA,ACHA,AENA,AT2BA,AjBmDA,AENA;AatCA,AU9BA,AFMA,ACHA,AENA,AT2BA,AjBmDA,AENA;AatCA,AU9BA,AFMA,ACHA,AENA,AT2BA,AjBmDA,AENA;AatCA,AU9BA,AFMA,ACHA,AENA,AT2BA,AjBmDA,AENA;AatCA,AU9BA,AFMA,ACHA,AENA,AT2BA,AjBmDA,AENA;AatCA,AU9BA,AFMA,ACHA,AENA,AT2BA,AjBmDA,AENA;AatCA,AU9BA,AFMA,ACHA,AENA,AT2BA,AjBmDA;Ae5CA,AU9BA,AFMA,ACHA,AENA,AT2BA,AjBmDA;Ae5CA,AU9BA,ADGA,AENA,AT2BA,AjBmDA;Ae5CA,AU9BA,ADGA,AENA,AT2BA,AjBmDA;Ae5CA,AU9BA,ADGA,AENA,AT2BA,AjBmDA;Ae5CA,AU9BA,ADGA,AENA,AT2BA,AjBmDA;Ae5CA,AU9BA,ADGA,AENA,AT2BA,AjBmDA;Ae5CA,AU9BA,ADGA,AENA,AT2BA,AjBmDA;Ae5CA,AU9BA,ADGA,AENA,AT2BA,AjBmDA;Ae5CA,AU9BA,ADGA,AENA,AT2BA,AjBmDA;Ae5CA,AU9BA,ACHA,AT2BA,AjBmDA;Ae5CA,AU9BA,ACHA,AT2BA,AjBmDA;Ae5CA,AU9BA,ACHA,AT2BA,AjBmDA;Ae5CA,AU9BA,ACHA,AT2BA,AjBmDA;Ae5CA,AU9BA,ACHA,AT2BA,AjBmDA;Ae5CA,AU9BA,ACHA,AT2BA,AjBmDA;Ae5CA,AU9BA,ACHA,AT2BA,AjBmDA;Ae5CA,AU9BA,ACHA,AT2BA,AjBmDA;Ae5CA,AU9BA,ACHA,AT2BA,AjBmDA;Ae5CA,AU9BA,ACHA,AT2BA,AjBmDA;Ae5CA,AU9BA,ACHA,AT2BA,AjBmDA;Ae5CA,AU9BA,ACHA,AT2BA,AjBmDA;Ae5CA,AU9BA,ACHA,AT2BA,AjBmDA;Ae5CA,AU9BA,ACHA,AT2BA,AjBmDA;Ae5CA,AU9BA,ACHA,AT2BA,AjBmDA;Ae5CA,AU9BA,ACHA,AT2BA,AjBmDA;Ae5CA,AU9BA,ACHA,AT2BA,AjBmDA;Ae5CA,AU9BA,ACHA,AT2BA,AjBmDA;Ae5CA,AU9BA,ACHA,AT2BA,AjBmDA;Ae5CA,AU9BA,ACHA,AT2BA,AjBmDA;Ae5CA,AU9BA,ACHA,A1B8EA;Ae5CA,AU9BA,ACHA,A1B8EA;Ae5CA,AU9BA,ACHA,A1B8EA;Ae5CA,AU9BA,ACHA,A1B8EA;Ae5CA,AU9BA,ACHA,A1B8EA;Ae5CA,AU9BA,ACHA,A1B8EA;Ae5CA,AU9BA,ACHA,A1B8EA;Ae5CA,AU9BA,ACHA,A1B8EA;Ae5CA,AU9BA,ACHA,A1B8EA;Ae5CA,AU9BA,ACHA,A1B8EA;Ae5CA,AU9BA,ACHA,A1B8EA;Ae5CA,AU9BA,ACHA,A1B8EA;Ae5CA,AU9BA,ACHA,A1B8EA;Ae5CA,AU9BA,ACHA,A1B8EA;Ae5CA,AU9BA,ACHA,A1B8EA;Ae5CA,AU9BA,ACHA,A1B8EA;Ae5CA,AU9BA,ACHA,A1B8EA;Ae5CA,AU9BA,ACHA,A1B8EA;Ae5CA,AU9BA,ACHA,A1B8EA;Ae5CA,AU9BA,ACHA,A1B8EA;Ae5CA,AU9BA,ACHA,A1B8EA;Ae5CA,AU9BA,ACHA,A1B8EA;Ae5CA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["const storage = require(\"./src/storage\");\nconst database = require(\"./src/db\").Db;\nconst functions = require(\"./src/functions\");\nconst wx = require(\"./src/wx\");\n\nfunction Tcb(config) {\n  // console.log(config)\n  this.config = config ? config : this.config\n}\n\nTcb.prototype.init = function ({\n  secretId,\n  secretKey,\n  sessionToken,\n  env,\n  proxy,\n  timeout,\n  serviceUrl\n} = {}) {\n  if ((secretId && !secretKey) || (!secretId && secretKey)) {\n    throw Error(\"secretId and secretKey must be a pair\");\n  }\n\n  this.config = {\n    get secretId() {\n      return this._secretId\n        ? this._secretId\n        : process.env.TENCENTCLOUD_SECRETID;\n    },\n    set secretId(id) {\n      this._secretId = id;\n    },\n    get secretKey() {\n      return this._secretKey\n        ? this._secretKey\n        : process.env.TENCENTCLOUD_SECRETKEY;\n    },\n    set secretKey(key) {\n      this._secretKey = key;\n    },\n    get sessionToken() {\n      if (this._sessionToken === undefined) {\n        //默认临时密钥\n        return process.env.TENCENTCLOUD_SESSIONTOKEN;\n      } else if (this._sessionToken === false) {\n        //固定秘钥\n        return undefined;\n      } else {\n        //传入的临时密钥\n        return this._sessionToken;\n      }\n    },\n    set sessionToken(token) {\n      this._sessionToken = token;\n    },\n    envName: env,\n    proxy: proxy\n  };\n\n  this.config.secretId = secretId;\n  this.config.secretKey = secretKey;\n  this.config.timeout = timeout || 15000\n  this.config.serviceUrl = serviceUrl\n  this.config.sessionToken = sessionToken ? sessionToken : (secretId && secretKey ? false : undefined);\n\n  return new Tcb(this.config);\n};\n\nTcb.prototype.database = function (dbConfig) {\n  return new database({ ...this, ...dbConfig });\n};\n\nfunction each(obj, fn) {\n  for (var i in obj) {\n    if (obj.hasOwnProperty(i)) {\n      fn(obj[i], i);\n    }\n  }\n}\n\nfunction extend(target, source) {\n  each(source, function (val, key) {\n    target[key] = source[key];\n  });\n  return target;\n}\n\nextend(Tcb.prototype, functions);\nextend(Tcb.prototype, storage);\nextend(Tcb.prototype, wx)\n\nmodule.exports = new Tcb();\n","const request = require(\"request\");\nconst fs = require('fs');\nconst httpRequest = require(\"../utils/httpRequest\");\n\n/*\n * 上传文件\n * @param {string} cloudPath 上传后的文件路径\n * @param {fs.ReadStream} fileContent  上传文件的二进制流\n */\nfunction uploadFile({ cloudPath, fileContent }, { onResponseReceived } = {}) {\n  let params = {\n    action: \"storage.uploadFile\",\n    path: cloudPath,\n    file: fileContent\n  };\n\n  return httpRequest({\n    config: this.config,\n    params,\n    method: \"post\",\n    headers: {\n      // \"content-type\": \"multipart/form-data\"\n    },\n    callback: (response) => {\n      onResponseReceived && typeof onResponseReceived === 'function' && onResponseReceived(response)\n    }\n  }).then((res) => {\n    if (res.code) {\n      return res;\n    } else {\n      return {\n        fileID: res.data.fileID,\n        requestId: res.requestId\n      };\n    }\n  });\n}\n\n/**\n * 删除文件\n * @param {Array.<string>} fileList 文件id数组\n */\nasync function deleteFile({ fileList }) {\n  if (!fileList || !Array.isArray(fileList)) {\n    return {\n      code: \"INVALID_PARAM\",\n      message: \"fileList必须是非空的数组\"\n    };\n  }\n\n  for (let file of fileList) {\n    if (!file || typeof file != \"string\") {\n      return {\n        code: \"INVALID_PARAM\",\n        message: \"fileList的元素必须是非空的字符串\"\n      };\n    }\n  }\n\n  let params = {\n    action: \"storage.batchDeleteFile\",\n    fileid_list: fileList\n  };\n\n  return httpRequest({\n    config: this.config,\n    params,\n    method: \"post\",\n    headers: {\n      \"content-type\": \"application/json\"\n    }\n  }).then(res => {\n    if (res.code) {\n      return res;\n    } else {\n      return {\n        fileList: res.data.delete_list,\n        requestId: res.requestId\n      };\n    }\n  });\n}\n\n/**\n * 获取文件下载链接\n * @param {Array.<Object>} fileList\n */\nasync function getTempFileURL({ fileList }) {\n  if (!fileList || !Array.isArray(fileList)) {\n    return {\n      code: \"INVALID_PARAM\",\n      message: \"fileList必须是非空的数组\"\n    };\n  }\n\n  let file_list = [];\n  for (let file of fileList) {\n    if (typeof file === 'object') {\n      if (\n        !file.hasOwnProperty(\"fileID\") ||\n        !file.hasOwnProperty(\"maxAge\")\n      ) {\n        return {\n          code: \"INVALID_PARAM\",\n          message: \"fileList的元素必须是包含fileID和maxAge的对象\"\n        };\n      }\n\n      file_list.push({\n        fileid: file.fileID,\n        max_age: file.maxAge\n      });\n    } else if (typeof file === 'string') {\n      file_list.push({\n        fileid: file,\n      });\n    } else {\n      return {\n        code: \"INVALID_PARAM\",\n        message: \"fileList的元素必须是字符串\"\n      };\n    }\n  }\n\n  let params = {\n    action: \"storage.batchGetDownloadUrl\",\n    file_list\n  };\n  // console.log(params);\n\n  return httpRequest({\n    config: this.config,\n    params,\n    method: \"post\",\n    headers: {\n      \"content-type\": \"application/json\"\n    }\n  }).then(res => {\n    // console.log(res);\n    if (res.code) {\n      return res;\n    } else {\n      return {\n        fileList: res.data.download_list,\n        requestId: res.requestId\n      };\n    }\n  });\n}\n\nasync function downloadFile({ fileID, tempFilePath }) {\n  let tmpUrl,\n    self = this;\n  try {\n    const tmpUrlRes = await this.getTempFileURL({\n      fileList: [\n        {\n          fileID,\n          maxAge: 600\n        }\n      ]\n    });\n    // console.log(tmpUrlRes);\n    const res = tmpUrlRes.fileList[0]\n\n    if (\n      res.code != 'SUCCESS'\n    ) {\n      return res;\n    }\n\n    tmpUrl = res.tempFileURL;\n    tmpUrl = encodeURI(tmpUrl);\n  } catch (e) {\n    throw e\n  }\n\n  let req = request({\n    url: tmpUrl,\n    encoding: null,\n    proxy: self.config.proxy\n  });\n\n  return new Promise((resolve, reject) => {\n    let fileContent = Buffer.alloc(0)\n    req.on('response', function (response) {\n      if (response && +response.statusCode === 200) {\n        if (tempFilePath) {\n          response.pipe(fs.createWriteStream(tempFilePath));\n        } else {\n          response.on('data', (data) => {\n            fileContent = Buffer.concat([fileContent, data])\n          })\n        }\n        response.on('end', () => {\n          resolve({\n            fileContent: tempFilePath ? undefined : fileContent,\n            message: '文件下载完成'\n          })\n        })\n      } else {\n        reject(response)\n      }\n    });\n  });\n}\n\nexports.uploadFile = uploadFile;\nexports.deleteFile = deleteFile;\nexports.getTempFileURL = getTempFileURL;\nexports.downloadFile = downloadFile;\n","var request = require(\"request\");\nvar auth = require(\"./auth.js\");\nconst version = require('../../package.json').version\n\nmodule.exports = function (args) {\n  var config = args.config,\n    params = args.params,\n    method = args.method || \"get\";\n\n  const eventId = (new Date()).valueOf() + '_' + Math.random().toString().substr(2, 5)\n\n  params = Object.assign({}, params, {\n    envName: config.envName,\n    timestamp: new Date().valueOf(),\n    eventId\n  });\n\n  for (let key in params) {\n    if (params[key] === undefined) {\n      delete params[key];\n    }\n  }\n\n  let file = null;\n  if (params.action === \"storage.uploadFile\") {\n    file = params[\"file\"];\n    delete params[\"file\"];\n  }\n\n  if (!config.secretId || !config.secretKey) {\n    if (process.env.TENCENTCLOUD_RUNENV === 'SCF') {\n      throw Error(\"missing authoration key, redeploy the function\")\n    }\n    throw Error(\"missing secretId or secretKey of tencent cloud\");\n  }\n\n  const authObj = {\n    SecretId: config.secretId,\n    SecretKey: config.secretKey,\n    Method: method,\n    pathname: \"/admin\",\n    Query: params,\n    Headers: Object.assign(\n      {\n        \"user-agent\": `tcb-admin-sdk/${version}`\n      },\n      args.headers || {}\n    )\n  };\n\n  var authorization = auth.getAuth(authObj);\n\n  params.authorization = authorization;\n  file && (params.file = file);\n  config.sessionToken && (params.sessionToken = config.sessionToken);\n  params.sdk_version = version\n\n  var opts = {\n    // url: 'http://localhost:8002/admin',\n    url: config.serviceUrl || \"http://tcb-admin.tencentcloudapi.com/admin\",\n    method: args.method || \"get\",\n    // 先取模块的timeout，没有则取sdk的timeout，还没有就使用默认值\n    timeout: args.timeout || config.timeout || 15000,\n    headers: authObj.Headers,\n    proxy: config.proxy\n  };\n\n  if (params.action === \"storage.uploadFile\") {\n    opts.formData = params;\n    opts.formData.file = {\n      value: params.file,\n      options: {\n        filename: params.path\n      }\n    };\n  } else if (args.method == \"post\") {\n    opts.body = params;\n    opts.json = true;\n  } else {\n    opts.qs = params;\n  }\n\n  if (params.action === 'wx.api') {\n    opts.url = 'https://tcb-open.tencentcloudapi.com/admin'\n  }\n\n  if (args.proxy) {\n    opts.proxy = args.proxy;\n  }\n\n  opts.url = `${opts.url}?eventId=${eventId}`\n\n  // console.log(JSON.stringify(opts));\n  return new Promise(function (resolve, reject) {\n    request(opts, function (err, response, body) {\n      // console.log(err, body);\n      args && args.callback && args.callback(response)\n\n      if (err === null && response.statusCode == 200) {\n        let res;\n        try {\n          res = typeof body === \"string\" ? JSON.parse(body) : body;\n        } catch (e) {\n          res = body;\n        }\n        return resolve(res);\n      } else {\n        return reject(err);\n      }\n    });\n  });\n};\n","var crypto = require(\"crypto\");\n\nfunction camSafeUrlEncode(str) {\n  return encodeURIComponent(str)\n    .replace(/!/g, \"%21\")\n    .replace(/'/g, \"%27\")\n    .replace(/\\(/g, \"%28\")\n    .replace(/\\)/g, \"%29\")\n    .replace(/\\*/g, \"%2A\");\n}\nfunction map(obj, fn) {\n  var o = isArray(obj) ? [] : {};\n  for (var i in obj) {\n    if (obj.hasOwnProperty(i)) {\n      o[i] = fn(obj[i], i);\n    }\n  }\n  return o;\n}\nfunction isArray(arr) {\n  return arr instanceof Array;\n}\n\nfunction clone(obj) {\n  return map(obj, function(v) {\n    return typeof v === \"object\" && v !== undefined && v !== null\n      ? clone(v)\n      : v;\n  });\n}\n//测试用的key后面可以去掉\nvar getAuth = function(opt) {\n  //   console.log(opt);\n  opt = opt || {};\n\n  var SecretId = opt.SecretId;\n  var SecretKey = opt.SecretKey;\n  var method = (opt.method || opt.Method || \"get\").toLowerCase();\n  var pathname = opt.pathname || \"/\";\n  var queryParams = clone(opt.Query || opt.params || {});\n  var headers = clone(opt.Headers || opt.headers || {});\n  pathname.indexOf(\"/\") !== 0 && (pathname = \"/\" + pathname);\n\n  if (!SecretId) return console.error(\"missing param SecretId\");\n  if (!SecretKey) return console.error(\"missing param SecretKey\");\n\n  var getObjectKeys = function(obj) {\n    var list = [];\n    for (var key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        if (obj[key] === undefined) {\n          continue;\n        }\n        list.push(key);\n      }\n    }\n    return list.sort();\n  };\n\n  var obj2str = function(obj) {\n    var i, key, val;\n    var list = [];\n    var keyList = getObjectKeys(obj);\n    for (i = 0; i < keyList.length; i++) {\n      key = keyList[i];\n      if (obj[key] === undefined) {\n        continue;\n      }\n      val = obj[key] === null ? \"\" : obj[key];\n      if (typeof val !== \"string\") {\n        val = JSON.stringify(val);\n      }\n      key = key.toLowerCase();\n      key = camSafeUrlEncode(key);\n      val = camSafeUrlEncode(val) || \"\";\n      list.push(key + \"=\" + val);\n    }\n    return list.join(\"&\");\n  };\n\n  // 签名有效起止时间\n  var now = parseInt(new Date().getTime() / 1000) - 1;\n  var exp = now;\n\n  var Expires = opt.Expires || opt.expires;\n  if (Expires === undefined) {\n    exp += 900; // 签名过期时间为当前 + 900s\n  } else {\n    exp += Expires * 1 || 0;\n  }\n\n  // 要用到的 Authorization 参数列表\n  var qSignAlgorithm = \"sha1\";\n  var qAk = SecretId;\n  var qSignTime = now + \";\" + exp;\n  var qKeyTime = now + \";\" + exp;\n  var qHeaderList = getObjectKeys(headers)\n    .join(\";\")\n    .toLowerCase();\n  var qUrlParamList = getObjectKeys(queryParams)\n    .join(\";\")\n    .toLowerCase();\n\n  // 签名算法说明文档：https://www.qcloud.com/document/product/436/7778\n  // 步骤一：计算 SignKey\n  var signKey = crypto\n    .createHmac(\"sha1\", SecretKey)\n    .update(qKeyTime)\n    .digest(\"hex\");\n\n  // console.log(\"queryParams\", queryParams);\n  // console.log(obj2str(queryParams));\n\n  // 步骤二：构成 FormatString\n  var formatString = [\n    method,\n    pathname,\n    obj2str(queryParams),\n    obj2str(headers),\n    \"\"\n  ].join(\"\\n\");\n\n  // console.log(formatString);\n  formatString = Buffer.from(formatString, \"utf8\");\n\n  // 步骤三：计算 StringToSign\n  var sha1Algo = crypto.createHash(\"sha1\");\n  sha1Algo.update(formatString);\n  var res = sha1Algo.digest(\"hex\");\n  var stringToSign = [\"sha1\", qSignTime, res, \"\"].join(\"\\n\");\n\n  // console.log(stringToSign);\n  // 步骤四：计算 Signature\n  var qSignature = crypto\n    .createHmac(\"sha1\", signKey)\n    .update(stringToSign)\n    .digest(\"hex\");\n\n  // 步骤五：构造 Authorization\n  var authorization = [\n    \"q-sign-algorithm=\" + qSignAlgorithm,\n    \"q-ak=\" + qAk,\n    \"q-sign-time=\" + qSignTime,\n    \"q-key-time=\" + qKeyTime,\n    \"q-header-list=\" + qHeaderList,\n    \"q-url-param-list=\" + qUrlParamList,\n    \"q-signature=\" + qSignature\n  ].join(\"&\");\n\n  return authorization;\n};\n\nexports.getAuth = getAuth;\n","module.exports = {\n  \"_from\": \"tcb-admin-node@1.4.2\",\n  \"_id\": \"tcb-admin-node@1.4.2\",\n  \"_inBundle\": false,\n  \"_integrity\": \"sha1-MrsKQTIhbDxA2KCkVR310LccY98=\",\n  \"_location\": \"/tcb-admin-node\",\n  \"_phantomChildren\": {},\n  \"_requested\": {\n    \"type\": \"version\",\n    \"registry\": true,\n    \"raw\": \"tcb-admin-node@1.4.2\",\n    \"name\": \"tcb-admin-node\",\n    \"escapedName\": \"tcb-admin-node\",\n    \"rawSpec\": \"1.4.2\",\n    \"saveSpec\": null,\n    \"fetchSpec\": \"1.4.2\"\n  },\n  \"_requiredBy\": [\n    \"/wx-server-sdk\"\n  ],\n  \"_resolved\": \"http://registry.npm.taobao.org/tcb-admin-node/download/tcb-admin-node-1.4.2.tgz\",\n  \"_shasum\": \"32bb0a4132216c3c40d8a0a4551df5d0b71c63df\",\n  \"_spec\": \"tcb-admin-node@1.4.2\",\n  \"_where\": \"D:\\\\project\\\\PJXT(WX.program)\\\\miniprogram\\\\node_modules\\\\wx-server-sdk\",\n  \"author\": {\n    \"name\": \"jimmyzhang\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/TencentCloudBase/tcb-admin-node/issues\"\n  },\n  \"bundleDependencies\": false,\n  \"dependencies\": {\n    \"is-regex\": \"^1.0.4\",\n    \"lodash.merge\": \"^4.6.1\",\n    \"request\": \"^2.87.0\"\n  },\n  \"deprecated\": false,\n  \"description\": \"tencent cloud base admin sdk for node.js\",\n  \"devDependencies\": {\n    \"@types/jest\": \"^23.1.4\",\n    \"@types/mocha\": \"^5.2.4\",\n    \"@types/node\": \"^10.12.12\",\n    \"espower-typescript\": \"^8.1.4\",\n    \"jest\": \"^23.3.0\",\n    \"mocha\": \"^5.2.0\",\n    \"power-assert\": \"^1.5.0\",\n    \"ts-jest\": \"^23.10.4\",\n    \"tslib\": \"^1.7.1\",\n    \"typescript\": \"^2.3.4\"\n  },\n  \"engines\": {\n    \"node\": \">=8.6.0\"\n  },\n  \"homepage\": \"https://github.com/TencentCloudBase/tcb-admin-node#readme\",\n  \"keywords\": [\n    \"tcb-admin\"\n  ],\n  \"license\": \"MIT\",\n  \"main\": \"index.js\",\n  \"name\": \"tcb-admin-node\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/TencentCloudBase/tcb-admin-node.git\"\n  },\n  \"scripts\": {\n    \"coverage\": \"jest --verbose false --coverage\",\n    \"test\": \"jest --verbose false -i\",\n    \"tsc\": \"tsc -p tsconfig.json\",\n    \"tsc:w\": \"tsc -p tsconfig.json -w\",\n    \"tstest\": \"mocha --require espower-typescript/guess test/**/*.test.ts\"\n  },\n  \"version\": \"1.4.2\"\n}\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./db\"));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Geo = require(\"./geo\");\nconst collection_1 = require(\"./collection\");\nconst command_1 = require(\"./command\");\nconst serverDate_1 = require(\"./serverDate\");\nconst request_1 = require(\"./request\");\nconst regexp_1 = require(\"./regexp\");\nclass Db {\n    constructor(config) {\n        this.config = config;\n        this.Geo = Geo;\n        this.serverDate = serverDate_1.ServerDateConstructor;\n        this.command = command_1.Command;\n        this.RegExp = regexp_1.RegExpConstructor;\n    }\n    collection(collName) {\n        if (!collName) {\n            throw new Error(\"Collection name is required\");\n        }\n        return new collection_1.CollectionReference(this, collName);\n    }\n    createCollection(collName) {\n        let request = new request_1.Request(this);\n        const params = {\n            collectionName: collName\n        };\n        return request.send(\"addCollection\", params);\n    }\n}\nexports.Db = Db;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./point\"));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst validate_1 = require(\"../validate\");\nconst symbol_1 = require(\"../helper/symbol\");\nclass Point {\n    constructor(longitude, latitude) {\n        validate_1.Validate.isGeopoint(\"longitude\", longitude);\n        validate_1.Validate.isGeopoint(\"latitude\", latitude);\n        this.longitude = longitude;\n        this.latitude = latitude;\n    }\n    parse(key) {\n        return {\n            [key]: {\n                type: 'Point',\n                coordinates: [this.longitude, this.latitude]\n            }\n        };\n    }\n    toJSON() {\n        return {\n            type: 'Point',\n            coordinates: [\n                this.longitude,\n                this.latitude,\n            ],\n        };\n    }\n    get _internalType() {\n        return symbol_1.SYMBOL_GEO_POINT;\n    }\n}\nexports.Point = Point;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst constant_1 = require(\"./constant\");\nconst util_1 = require(\"./util\");\nclass Validate {\n    static isGeopoint(point, degree) {\n        if (util_1.Util.whichType(degree) !== constant_1.FieldType.Number) {\n            throw new Error(\"Geo Point must be number type\");\n        }\n        const degreeAbs = Math.abs(degree);\n        if (point === \"latitude\" && degreeAbs > 90) {\n            throw new Error(\"latitude should be a number ranges from -90 to 90\");\n        }\n        else if (point === \"longitude\" && degreeAbs > 180) {\n            throw new Error(\"longitude should be a number ranges from -180 to 180\");\n        }\n        return true;\n    }\n    static isInteger(param, num) {\n        if (!Number.isInteger(num)) {\n            throw new Error(param + constant_1.ErrorCode.IntergerError);\n        }\n        return true;\n    }\n    static isFieldOrder(direction) {\n        if (constant_1.OrderDirectionList.indexOf(direction) === -1) {\n            throw new Error(constant_1.ErrorCode.DirectionError);\n        }\n        return true;\n    }\n    static isFieldPath(path) {\n        if (!/^[a-zA-Z0-9-_\\.]/.test(path)) {\n            throw new Error();\n        }\n        return true;\n    }\n    static isOperator(op) {\n        if (constant_1.WhereFilterOpList.indexOf(op) === -1) {\n            throw new Error(constant_1.ErrorCode.OpStrError);\n        }\n        return true;\n    }\n    static isCollName(name) {\n        if (!/^[a-zA-Z0-9]([a-zA-Z0-9-_]){1,32}$/.test(name)) {\n            throw new Error(constant_1.ErrorCode.CollNameError);\n        }\n        return true;\n    }\n    static isDocID(docId) {\n        if (!/^([a-fA-F0-9]){24}$/.test(docId)) {\n            throw new Error(constant_1.ErrorCode.DocIDError);\n        }\n        return true;\n    }\n}\nexports.Validate = Validate;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ErrorCode;\n(function (ErrorCode) {\n    ErrorCode[\"DocIDError\"] = \"\\u6587\\u6863ID\\u4E0D\\u5408\\u6CD5\";\n    ErrorCode[\"CollNameError\"] = \"\\u96C6\\u5408\\u540D\\u79F0\\u4E0D\\u5408\\u6CD5\";\n    ErrorCode[\"OpStrError\"] = \"\\u64CD\\u4F5C\\u7B26\\u4E0D\\u5408\\u6CD5\";\n    ErrorCode[\"DirectionError\"] = \"\\u6392\\u5E8F\\u5B57\\u7B26\\u4E0D\\u5408\\u6CD5\";\n    ErrorCode[\"IntergerError\"] = \"must be integer\";\n})(ErrorCode || (ErrorCode = {}));\nexports.ErrorCode = ErrorCode;\nconst FieldType = {\n    String: \"String\",\n    Number: \"Number\",\n    Object: \"Object\",\n    Array: \"Array\",\n    Boolean: \"Boolean\",\n    Null: \"Null\",\n    GeoPoint: \"GeoPoint\",\n    Timestamp: \"Date\",\n    Command: \"Command\",\n    ServerDate: \"ServerDate\"\n};\nexports.FieldType = FieldType;\nconst OrderDirectionList = [\"desc\", \"asc\"];\nexports.OrderDirectionList = OrderDirectionList;\nconst WhereFilterOpList = [\"<\", \"<=\", \"==\", \">=\", \">\"];\nexports.WhereFilterOpList = WhereFilterOpList;\nvar Opeartor;\n(function (Opeartor) {\n    Opeartor[\"lt\"] = \"<\";\n    Opeartor[\"gt\"] = \">\";\n    Opeartor[\"lte\"] = \"<=\";\n    Opeartor[\"gte\"] = \">=\";\n    Opeartor[\"eq\"] = \"==\";\n})(Opeartor || (Opeartor = {}));\nexports.Opeartor = Opeartor;\nconst OperatorMap = {\n    [Opeartor.eq]: \"$eq\",\n    [Opeartor.lt]: \"$lt\",\n    [Opeartor.lte]: \"$lte\",\n    [Opeartor.gt]: \"$gt\",\n    [Opeartor.gte]: \"$gte\"\n};\nexports.OperatorMap = OperatorMap;\nconst UpdateOperatorList = [\n    \"$set\",\n    \"$inc\",\n    \"$mul\",\n    \"$unset\",\n    \"$push\",\n    \"$pop\",\n    \"$unshift\",\n    \"$shift\",\n    \"$currentDate\",\n    \"$each\",\n    \"$position\"\n];\nexports.UpdateOperatorList = UpdateOperatorList;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst constant_1 = require(\"./constant\");\nconst point_1 = require(\"./geo/point\");\nconst serverDate_1 = require(\"./serverDate\");\nclass Util {\n}\nUtil.formatResDocumentData = (documents) => {\n    return documents.map(document => {\n        return Util.formatField(document);\n    });\n};\nUtil.formatField = document => {\n    const keys = Object.keys(document);\n    let protoField = {};\n    if (Array.isArray(document)) {\n        protoField = [];\n    }\n    keys.forEach(key => {\n        const item = document[key];\n        const type = Util.whichType(item);\n        let realValue;\n        switch (type) {\n            case constant_1.FieldType.GeoPoint:\n                realValue = new point_1.Point(item.coordinates[0], item.coordinates[1]);\n                break;\n            case constant_1.FieldType.Timestamp:\n                realValue = new Date(item.$date);\n                break;\n            case constant_1.FieldType.Object:\n            case constant_1.FieldType.Array:\n                realValue = Util.formatField(item);\n                break;\n            case constant_1.FieldType.ServerDate:\n                realValue = new Date(item.$date);\n                break;\n            default:\n                realValue = item;\n        }\n        if (Array.isArray(protoField)) {\n            protoField.push(realValue);\n        }\n        else {\n            protoField[key] = realValue;\n        }\n    });\n    return protoField;\n};\nUtil.whichType = (obj) => {\n    let type = Object.prototype.toString.call(obj).slice(8, -1);\n    if (type === constant_1.FieldType.Object) {\n        if (obj instanceof point_1.Point) {\n            return constant_1.FieldType.GeoPoint;\n        }\n        else if (obj instanceof Date) {\n            return constant_1.FieldType.Timestamp;\n        }\n        else if (obj instanceof serverDate_1.ServerDate) {\n            return constant_1.FieldType.ServerDate;\n        }\n        if (obj.$timestamp) {\n            type = constant_1.FieldType.Timestamp;\n        }\n        else if (obj.$date) {\n            type = constant_1.FieldType.ServerDate;\n        }\n        else if (Array.isArray(obj.coordinates) && obj.type === \"Point\") {\n            type = constant_1.FieldType.GeoPoint;\n        }\n    }\n    return type;\n};\nUtil.generateDocId = () => {\n    let chars = \"ABCDEFabcdef0123456789\";\n    let autoId = \"\";\n    for (let i = 0; i < 24; i++) {\n        autoId += chars.charAt(Math.floor(Math.random() * chars.length));\n    }\n    return autoId;\n};\nexports.Util = Util;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst symbol_1 = require(\"../helper/symbol\");\nclass ServerDate {\n    constructor({ offset = 0 } = {}) {\n        this.offset = offset;\n    }\n    get _internalType() {\n        return symbol_1.SYMBOL_SERVER_DATE;\n    }\n    parse() {\n        return {\n            $date: {\n                offset: this.offset\n            }\n        };\n    }\n}\nexports.ServerDate = ServerDate;\nfunction ServerDateConstructor(opt) {\n    return new ServerDate(opt);\n}\nexports.ServerDateConstructor = ServerDateConstructor;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst symbol_1 = require(\"../utils/symbol\");\n__export(require(\"../utils/symbol\"));\nexports.SYMBOL_UNSET_FIELD_NAME = symbol_1.default.for('UNSET_FIELD_NAME');\nexports.SYMBOL_UPDATE_COMMAND = symbol_1.default.for('UPDATE_COMMAND');\nexports.SYMBOL_QUERY_COMMAND = symbol_1.default.for('QUERY_COMMAND');\nexports.SYMBOL_LOGIC_COMMAND = symbol_1.default.for('LOGIC_COMMAND');\nexports.SYMBOL_GEO_POINT = symbol_1.default.for('GEO_POINT');\nexports.SYMBOL_SERVER_DATE = symbol_1.default.for('SERVER_DATE');\nexports.SYMBOL_REGEXP = symbol_1.default.for('REGEXP');\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst _symbols = [];\nconst __internalMark__ = {};\nclass HiddenSymbol {\n    constructor(target) {\n        Object.defineProperties(this, {\n            target: {\n                enumerable: false,\n                writable: false,\n                configurable: false,\n                value: target,\n            },\n        });\n    }\n}\nclass InternalSymbol extends HiddenSymbol {\n    constructor(target, __mark__) {\n        if (__mark__ !== __internalMark__) {\n            throw new TypeError('InternalSymbol cannot be constructed with new operator');\n        }\n        super(target);\n    }\n    static for(target) {\n        for (let i = 0, len = _symbols.length; i < len; i++) {\n            if (_symbols[i].target === target) {\n                return _symbols[i].instance;\n            }\n        }\n        const symbol = new InternalSymbol(target, __internalMark__);\n        _symbols.push({\n            target,\n            instance: symbol,\n        });\n        return symbol;\n    }\n}\nexports.InternalSymbol = InternalSymbol;\nexports.default = InternalSymbol;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst document_1 = require(\"./document\");\nconst query_1 = require(\"./query\");\nclass CollectionReference extends query_1.Query {\n    constructor(db, coll) {\n        super(db, coll);\n    }\n    get name() {\n        return this._coll;\n    }\n    doc(docID) {\n        return new document_1.DocumentReference(this._db, this._coll, docID);\n    }\n    add(data) {\n        let docRef = this.doc();\n        return docRef.create(data);\n    }\n}\nexports.CollectionReference = CollectionReference;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst request_1 = require(\"./request\");\nconst util_1 = require(\"./util\");\nconst update_1 = require(\"./serializer/update\");\nconst datatype_1 = require(\"./serializer/datatype\");\nconst update_2 = require(\"./commands/update\");\nclass DocumentReference {\n    constructor(db, coll, docID, projection = {}) {\n        this._db = db;\n        this._coll = coll;\n        this.id = docID;\n        this.request = new request_1.Request(this._db);\n        this.projection = projection;\n    }\n    create(data) {\n        let params = {\n            collectionName: this._coll,\n            data: datatype_1.serialize(data)\n        };\n        if (this.id) {\n            params[\"_id\"] = this.id;\n        }\n        return new Promise(resolve => {\n            this.request.send(\"addDocument\", params).then(res => {\n                if (res.code) {\n                    resolve(res);\n                }\n                resolve({\n                    id: res.data._id,\n                    requestId: res.requestId\n                });\n            });\n        });\n    }\n    set(data) {\n        if (!data || typeof data !== \"object\") {\n            return Promise.resolve({\n                code: 'INVALID_PARAM',\n                message: '参数必需是非空对象'\n            });\n        }\n        if (data.hasOwnProperty('_id')) {\n            return Promise.resolve({\n                code: 'INVALID_PARAM',\n                message: '不能更新_id的值'\n            });\n        }\n        let hasOperator = false;\n        const checkMixed = (objs) => {\n            if (typeof objs === 'object') {\n                for (let key in objs) {\n                    if (objs[key] instanceof update_2.UpdateCommand) {\n                        hasOperator = true;\n                    }\n                    else if (typeof objs[key] === 'object') {\n                        checkMixed(objs[key]);\n                    }\n                }\n            }\n        };\n        checkMixed(data);\n        if (hasOperator) {\n            return Promise.resolve({\n                code: 'DATABASE_REQUEST_FAILED',\n                message: 'update operator complicit'\n            });\n        }\n        const merge = false;\n        let param = {\n            collectionName: this._coll,\n            data: datatype_1.serialize(data),\n            multi: false,\n            merge,\n            upsert: true\n        };\n        if (this.id) {\n            param[\"query\"] = { _id: this.id };\n        }\n        return new Promise(resolve => {\n            this.request.send(\"updateDocument\", param).then(res => {\n                if (res.code) {\n                    resolve(res);\n                }\n                else {\n                    resolve({\n                        updated: res.data.updated,\n                        upsertedId: res.data.upserted_id,\n                        requestId: res.requestId\n                    });\n                }\n            });\n        });\n    }\n    update(data) {\n        if (!data || typeof data !== \"object\") {\n            return Promise.resolve({\n                code: 'INVALID_PARAM',\n                message: '参数必需是非空对象'\n            });\n        }\n        if (data.hasOwnProperty('_id')) {\n            return Promise.resolve({\n                code: 'INVALID_PARAM',\n                message: '不能更新_id的值'\n            });\n        }\n        const query = { _id: this.id };\n        const merge = true;\n        const param = {\n            collectionName: this._coll,\n            data: update_1.UpdateSerializer.encode(data),\n            query: query,\n            multi: false,\n            merge,\n            upsert: false\n        };\n        return new Promise(resolve => {\n            this.request.send(\"updateDocument\", param).then(res => {\n                if (res.code) {\n                    resolve(res);\n                }\n                else {\n                    resolve({\n                        updated: res.data.updated,\n                        upsertedId: res.data.upserted_id,\n                        requestId: res.requestId\n                    });\n                }\n            });\n        });\n    }\n    remove() {\n        const query = { _id: this.id };\n        const param = {\n            collectionName: this._coll,\n            query: query,\n            multi: false\n        };\n        return new Promise(resolve => {\n            this.request.send(\"deleteDocument\", param).then(res => {\n                if (res.code) {\n                    resolve(res);\n                }\n                else {\n                    resolve({\n                        deleted: res.data.deleted,\n                        requestId: res.requestId\n                    });\n                }\n            });\n        });\n    }\n    get() {\n        const query = { _id: this.id };\n        const param = {\n            collectionName: this._coll,\n            query: query,\n            multi: false,\n            projection: this.projection\n        };\n        return new Promise(resolve => {\n            this.request.send(\"queryDocument\", param).then(res => {\n                if (res.code) {\n                    resolve(res);\n                }\n                else {\n                    const documents = util_1.Util.formatResDocumentData(res.data.list);\n                    resolve({\n                        data: documents,\n                        requestId: res.requestId,\n                        total: res.TotalCount,\n                        limit: res.Limit,\n                        offset: res.Offset\n                    });\n                }\n            });\n        });\n    }\n    field(projection) {\n        for (let k in projection) {\n            if (projection[k]) {\n                projection[k] = 1;\n            }\n            else {\n                projection[k] = 0;\n            }\n        }\n        return new DocumentReference(this._db, this._coll, this.id, projection);\n    }\n}\nexports.DocumentReference = DocumentReference;\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst requestHandler = require(\"../utils/httpRequest\");\nclass Request {\n    constructor(db) {\n        this.db = db;\n    }\n    send(api, data) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const params = Object.assign({}, data, {\n                action: `database.${api}`\n            });\n            const slowQueryWarning = setTimeout(() => {\n                console.warn('Database operation is longer than 3s. Please check query performance and your network environment.');\n            }, 3000);\n            try {\n                return yield requestHandler({\n                    timeout: this.db.config.timeout,\n                    config: this.db.config.config,\n                    params,\n                    method: \"post\",\n                    headers: {\n                        \"content-type\": \"application/json\"\n                    }\n                });\n            }\n            finally {\n                clearTimeout(slowQueryWarning);\n            }\n        });\n    }\n}\nexports.Request = Request;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst update_1 = require(\"../commands/update\");\nconst symbol_1 = require(\"../helper/symbol\");\nconst type_1 = require(\"../utils/type\");\nconst operator_map_1 = require(\"../operator-map\");\nconst common_1 = require(\"./common\");\nclass UpdateSerializer {\n    constructor() {\n    }\n    static encode(query) {\n        const stringifier = new UpdateSerializer();\n        return stringifier.encodeUpdate(query);\n    }\n    encodeUpdate(query) {\n        if (update_1.isUpdateCommand(query)) {\n            return this.encodeUpdateCommand(query);\n        }\n        else if (type_1.getType(query) === 'object') {\n            return this.encodeUpdateObject(query);\n        }\n        else {\n            return query;\n        }\n    }\n    encodeUpdateCommand(query) {\n        if (query.fieldName === symbol_1.SYMBOL_UNSET_FIELD_NAME) {\n            throw new Error(`Cannot encode a comparison command with unset field name`);\n        }\n        switch (query.operator) {\n            case update_1.UPDATE_COMMANDS_LITERAL.SET:\n            case update_1.UPDATE_COMMANDS_LITERAL.REMOVE:\n            case update_1.UPDATE_COMMANDS_LITERAL.INC:\n            case update_1.UPDATE_COMMANDS_LITERAL.MUL: {\n                return this.encodeFieldUpdateCommand(query);\n            }\n            case update_1.UPDATE_COMMANDS_LITERAL.PUSH:\n            case update_1.UPDATE_COMMANDS_LITERAL.POP:\n            case update_1.UPDATE_COMMANDS_LITERAL.SHIFT:\n            case update_1.UPDATE_COMMANDS_LITERAL.UNSHIFT: {\n                return this.encodeArrayUpdateCommand(query);\n            }\n            default: {\n                return this.encodeFieldUpdateCommand(query);\n            }\n        }\n    }\n    encodeFieldUpdateCommand(query) {\n        const $op = operator_map_1.operatorToString(query.operator);\n        switch (query.operator) {\n            case update_1.UPDATE_COMMANDS_LITERAL.REMOVE: {\n                return {\n                    [$op]: {\n                        [query.fieldName]: '',\n                    },\n                };\n            }\n            case update_1.UPDATE_COMMANDS_LITERAL.SET:\n            case update_1.UPDATE_COMMANDS_LITERAL.INC:\n            case update_1.UPDATE_COMMANDS_LITERAL.MUL:\n            default: {\n                return {\n                    [$op]: {\n                        [query.fieldName]: query.operands[0],\n                    },\n                };\n            }\n        }\n    }\n    encodeArrayUpdateCommand(query) {\n        const $op = operator_map_1.operatorToString(query.operator);\n        switch (query.operator) {\n            case update_1.UPDATE_COMMANDS_LITERAL.PUSH: {\n                const modifiers = {\n                    $each: query.operands.map(common_1.encodeInternalDataType),\n                };\n                return {\n                    [$op]: {\n                        [query.fieldName]: modifiers,\n                    },\n                };\n            }\n            case update_1.UPDATE_COMMANDS_LITERAL.UNSHIFT: {\n                const modifiers = {\n                    $each: query.operands.map(common_1.encodeInternalDataType),\n                    $position: 0,\n                };\n                return {\n                    [$op]: {\n                        [query.fieldName]: modifiers,\n                    },\n                };\n            }\n            case update_1.UPDATE_COMMANDS_LITERAL.POP: {\n                return {\n                    [$op]: {\n                        [query.fieldName]: 1,\n                    },\n                };\n            }\n            case update_1.UPDATE_COMMANDS_LITERAL.SHIFT: {\n                return {\n                    [$op]: {\n                        [query.fieldName]: -1,\n                    },\n                };\n            }\n            default: {\n                return {\n                    [$op]: {\n                        [query.fieldName]: common_1.encodeInternalDataType(query.operands),\n                    },\n                };\n            }\n        }\n    }\n    encodeUpdateObject(query) {\n        const flattened = common_1.flattenQueryObject(query);\n        for (const key in flattened) {\n            if (/^\\$/.test(key))\n                continue;\n            let val = flattened[key];\n            if (update_1.isUpdateCommand(val)) {\n                flattened[key] = val._setFieldName(key);\n                const condition = this.encodeUpdateCommand(flattened[key]);\n                common_1.mergeConditionAfterEncode(flattened, condition, key);\n            }\n            else {\n                flattened[key] = val = common_1.encodeInternalDataType(val);\n                const $setCommand = new update_1.UpdateCommand(update_1.UPDATE_COMMANDS_LITERAL.SET, [val], key);\n                const condition = this.encodeUpdateCommand($setCommand);\n                common_1.mergeConditionAfterEncode(flattened, condition, key);\n            }\n        }\n        return flattened;\n    }\n}\nexports.UpdateSerializer = UpdateSerializer;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst symbol_1 = require(\"../helper/symbol\");\nexports.SET = 'set';\nexports.REMOVE = 'remove';\nexports.INC = 'inc';\nexports.MUL = 'mul';\nexports.PUSH = 'push';\nexports.POP = 'pop';\nexports.SHIFT = 'shift';\nexports.UNSHIFT = 'unshift';\nvar UPDATE_COMMANDS_LITERAL;\n(function (UPDATE_COMMANDS_LITERAL) {\n    UPDATE_COMMANDS_LITERAL[\"SET\"] = \"set\";\n    UPDATE_COMMANDS_LITERAL[\"REMOVE\"] = \"remove\";\n    UPDATE_COMMANDS_LITERAL[\"INC\"] = \"inc\";\n    UPDATE_COMMANDS_LITERAL[\"MUL\"] = \"mul\";\n    UPDATE_COMMANDS_LITERAL[\"PUSH\"] = \"push\";\n    UPDATE_COMMANDS_LITERAL[\"POP\"] = \"pop\";\n    UPDATE_COMMANDS_LITERAL[\"SHIFT\"] = \"shift\";\n    UPDATE_COMMANDS_LITERAL[\"UNSHIFT\"] = \"unshift\";\n})(UPDATE_COMMANDS_LITERAL = exports.UPDATE_COMMANDS_LITERAL || (exports.UPDATE_COMMANDS_LITERAL = {}));\nclass UpdateCommand {\n    constructor(operator, operands, fieldName) {\n        this._internalType = symbol_1.SYMBOL_UPDATE_COMMAND;\n        Object.defineProperties(this, {\n            _internalType: {\n                enumerable: false,\n                configurable: false,\n            },\n        });\n        this.operator = operator;\n        this.operands = operands;\n        this.fieldName = fieldName || symbol_1.SYMBOL_UNSET_FIELD_NAME;\n    }\n    _setFieldName(fieldName) {\n        const command = new UpdateCommand(this.operator, this.operands, fieldName);\n        return command;\n    }\n}\nexports.UpdateCommand = UpdateCommand;\nfunction isUpdateCommand(object) {\n    return object && (object instanceof UpdateCommand) && (object._internalType === symbol_1.SYMBOL_UPDATE_COMMAND);\n}\nexports.isUpdateCommand = isUpdateCommand;\nfunction isKnownUpdateCommand(object) {\n    return isUpdateCommand(object) && (object.operator.toUpperCase() in UPDATE_COMMANDS_LITERAL);\n}\nexports.isKnownUpdateCommand = isKnownUpdateCommand;\nexports.default = UpdateCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst symbol_1 = require(\"./symbol\");\nexports.getType = (x) => Object.prototype.toString.call(x).slice(8, -1).toLowerCase();\nexports.isObject = (x) => exports.getType(x) === 'object';\nexports.isString = (x) => exports.getType(x) === 'string';\nexports.isNumber = (x) => exports.getType(x) === 'number';\nexports.isPromise = (x) => exports.getType(x) === 'promise';\nexports.isFunction = (x) => typeof x === 'function';\nexports.isArray = (x) => Array.isArray(x);\nexports.isDate = (x) => exports.getType(x) === 'date';\nexports.isRegExp = (x) => exports.getType(x) === 'regexp';\nexports.isInternalObject = (x) => x && (x._internalType instanceof symbol_1.InternalSymbol);\nexports.isPlainObject = (obj) => {\n    if (typeof obj !== 'object' || obj === null)\n        return false;\n    let proto = obj;\n    while (Object.getPrototypeOf(proto) !== null) {\n        proto = Object.getPrototypeOf(proto);\n    }\n    return Object.getPrototypeOf(obj) === proto;\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst query_1 = require(\"./commands/query\");\nconst logic_1 = require(\"./commands/logic\");\nconst update_1 = require(\"./commands/update\");\nexports.OperatorMap = {};\nfor (const key in query_1.QUERY_COMMANDS_LITERAL) {\n    exports.OperatorMap[key] = `$${key.toLowerCase()}`;\n}\nfor (const key in logic_1.LOGIC_COMMANDS_LITERAL) {\n    exports.OperatorMap[key] = `$${key.toLowerCase()}`;\n}\nfor (const key in update_1.UPDATE_COMMANDS_LITERAL) {\n    exports.OperatorMap[key] = `$${key.toLowerCase()}`;\n}\nexports.OperatorMap[query_1.QUERY_COMMANDS_LITERAL.NEQ] = '$ne';\nexports.OperatorMap[update_1.UPDATE_COMMANDS_LITERAL.REMOVE] = '$unset';\nexports.OperatorMap[update_1.UPDATE_COMMANDS_LITERAL.SHIFT] = '$pop';\nexports.OperatorMap[update_1.UPDATE_COMMANDS_LITERAL.UNSHIFT] = '$push';\nfunction operatorToString(operator) {\n    return exports.OperatorMap[operator] || `$${operator.toLowerCase()}`;\n}\nexports.operatorToString = operatorToString;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst logic_1 = require(\"./logic\");\nconst symbol_1 = require(\"../helper/symbol\");\nexports.EQ = 'eq';\nexports.NEQ = 'neq';\nexports.GT = 'gt';\nexports.GTE = 'gte';\nexports.LT = 'lt';\nexports.LTE = 'lte';\nexports.IN = 'in';\nexports.NIN = 'nin';\nvar QUERY_COMMANDS_LITERAL;\n(function (QUERY_COMMANDS_LITERAL) {\n    QUERY_COMMANDS_LITERAL[\"EQ\"] = \"eq\";\n    QUERY_COMMANDS_LITERAL[\"NEQ\"] = \"neq\";\n    QUERY_COMMANDS_LITERAL[\"GT\"] = \"gt\";\n    QUERY_COMMANDS_LITERAL[\"GTE\"] = \"gte\";\n    QUERY_COMMANDS_LITERAL[\"LT\"] = \"lt\";\n    QUERY_COMMANDS_LITERAL[\"LTE\"] = \"lte\";\n    QUERY_COMMANDS_LITERAL[\"IN\"] = \"in\";\n    QUERY_COMMANDS_LITERAL[\"NIN\"] = \"nin\";\n})(QUERY_COMMANDS_LITERAL = exports.QUERY_COMMANDS_LITERAL || (exports.QUERY_COMMANDS_LITERAL = {}));\nclass QueryCommand extends logic_1.LogicCommand {\n    constructor(operator, operands, fieldName) {\n        super(operator, operands, fieldName);\n        this.operator = operator;\n        this._internalType = symbol_1.SYMBOL_QUERY_COMMAND;\n    }\n    _setFieldName(fieldName) {\n        const command = new QueryCommand(this.operator, this.operands, fieldName);\n        return command;\n    }\n    eq(val) {\n        const command = new QueryCommand(QUERY_COMMANDS_LITERAL.EQ, [val], this.fieldName);\n        return this.and(command);\n    }\n    neq(val) {\n        const command = new QueryCommand(QUERY_COMMANDS_LITERAL.NEQ, [val], this.fieldName);\n        return this.and(command);\n    }\n    gt(val) {\n        const command = new QueryCommand(QUERY_COMMANDS_LITERAL.GT, [val], this.fieldName);\n        return this.and(command);\n    }\n    gte(val) {\n        const command = new QueryCommand(QUERY_COMMANDS_LITERAL.GTE, [val], this.fieldName);\n        return this.and(command);\n    }\n    lt(val) {\n        const command = new QueryCommand(QUERY_COMMANDS_LITERAL.LT, [val], this.fieldName);\n        return this.and(command);\n    }\n    lte(val) {\n        const command = new QueryCommand(QUERY_COMMANDS_LITERAL.LTE, [val], this.fieldName);\n        return this.and(command);\n    }\n    in(list) {\n        const command = new QueryCommand(QUERY_COMMANDS_LITERAL.IN, list, this.fieldName);\n        return this.and(command);\n    }\n    nin(list) {\n        const command = new QueryCommand(QUERY_COMMANDS_LITERAL.NIN, list, this.fieldName);\n        return this.and(command);\n    }\n}\nexports.QueryCommand = QueryCommand;\nfunction isQueryCommand(object) {\n    return object && (object instanceof QueryCommand) && (object._internalType === symbol_1.SYMBOL_QUERY_COMMAND);\n}\nexports.isQueryCommand = isQueryCommand;\nfunction isKnownQueryCommand(object) {\n    return isQueryCommand(object) && (object.operator.toUpperCase() in QUERY_COMMANDS_LITERAL);\n}\nexports.isKnownQueryCommand = isKnownQueryCommand;\nfunction isComparisonCommand(object) {\n    return isQueryCommand(object);\n}\nexports.isComparisonCommand = isComparisonCommand;\nexports.default = QueryCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst symbol_1 = require(\"../helper/symbol\");\nconst query_1 = require(\"./query\");\nexports.AND = 'and';\nexports.OR = 'or';\nexports.NOT = 'not';\nexports.NOR = 'nor';\nvar LOGIC_COMMANDS_LITERAL;\n(function (LOGIC_COMMANDS_LITERAL) {\n    LOGIC_COMMANDS_LITERAL[\"AND\"] = \"and\";\n    LOGIC_COMMANDS_LITERAL[\"OR\"] = \"or\";\n    LOGIC_COMMANDS_LITERAL[\"NOT\"] = \"not\";\n    LOGIC_COMMANDS_LITERAL[\"NOR\"] = \"nor\";\n})(LOGIC_COMMANDS_LITERAL = exports.LOGIC_COMMANDS_LITERAL || (exports.LOGIC_COMMANDS_LITERAL = {}));\nclass LogicCommand {\n    constructor(operator, operands, fieldName) {\n        this._internalType = symbol_1.SYMBOL_LOGIC_COMMAND;\n        Object.defineProperties(this, {\n            _internalType: {\n                enumerable: false,\n                configurable: false,\n            },\n        });\n        this.operator = operator;\n        this.operands = operands;\n        this.fieldName = fieldName || symbol_1.SYMBOL_UNSET_FIELD_NAME;\n        if (this.fieldName !== symbol_1.SYMBOL_UNSET_FIELD_NAME) {\n            operands = operands.slice();\n            this.operands = operands;\n            for (let i = 0, len = operands.length; i < len; i++) {\n                const query = operands[i];\n                if (isLogicCommand(query) || query_1.isQueryCommand(query)) {\n                    operands[i] = query._setFieldName(this.fieldName);\n                }\n            }\n        }\n    }\n    _setFieldName(fieldName) {\n        const operands = this.operands.map(operand => {\n            if (operand instanceof LogicCommand) {\n                return operand._setFieldName(fieldName);\n            }\n            else {\n                return operand;\n            }\n        });\n        const command = new LogicCommand(this.operator, operands, fieldName);\n        return command;\n    }\n    and(...__expressions__) {\n        const expressions = Array.isArray(arguments[0]) ? arguments[0] : Array.from(arguments);\n        expressions.unshift(this);\n        return new LogicCommand(LOGIC_COMMANDS_LITERAL.AND, expressions, this.fieldName);\n    }\n    or(...__expressions__) {\n        const expressions = Array.isArray(arguments[0]) ? arguments[0] : Array.from(arguments);\n        expressions.unshift(this);\n        return new LogicCommand(LOGIC_COMMANDS_LITERAL.OR, expressions, this.fieldName);\n    }\n}\nexports.LogicCommand = LogicCommand;\nfunction isLogicCommand(object) {\n    return object && (object instanceof LogicCommand) && (object._internalType === symbol_1.SYMBOL_LOGIC_COMMAND);\n}\nexports.isLogicCommand = isLogicCommand;\nfunction isKnownLogicCommand(object) {\n    return isLogicCommand && (object.operator.toUpperCase() in LOGIC_COMMANDS_LITERAL);\n}\nexports.isKnownLogicCommand = isKnownLogicCommand;\nexports.default = LogicCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst type_1 = require(\"../utils/type\");\nconst datatype_1 = require(\"./datatype\");\nfunction flatten(query, shouldPreserverObject, parents, visited) {\n    const cloned = Object.assign({}, query);\n    for (const key in query) {\n        if (/^\\$/.test(key))\n            continue;\n        const value = query[key];\n        if (!value)\n            continue;\n        if (type_1.isObject(value) && !shouldPreserverObject(value)) {\n            if (visited.indexOf(value) > -1) {\n                throw new Error(`Cannot convert circular structure to JSON`);\n            }\n            const newParents = [\n                ...parents,\n                key,\n            ];\n            const newVisited = [\n                ...visited,\n                value,\n            ];\n            const flattenedChild = flatten(value, shouldPreserverObject, newParents, newVisited);\n            cloned[key] = flattenedChild;\n            let hasKeyNotCombined = false;\n            for (const childKey in flattenedChild) {\n                if (!/^\\$/.test(childKey)) {\n                    cloned[`${key}.${childKey}`] = flattenedChild[childKey];\n                    delete cloned[key][childKey];\n                }\n                else {\n                    hasKeyNotCombined = true;\n                }\n            }\n            if (!hasKeyNotCombined) {\n                delete cloned[key];\n            }\n        }\n    }\n    return cloned;\n}\nfunction flattenQueryObject(query) {\n    return flatten(query, isConversionRequired, [], [query]);\n}\nexports.flattenQueryObject = flattenQueryObject;\nfunction flattenObject(object) {\n    return flatten(object, (_) => false, [], [object]);\n}\nexports.flattenObject = flattenObject;\nfunction mergeConditionAfterEncode(query, condition, key) {\n    if (!condition[key]) {\n        delete query[key];\n    }\n    for (const conditionKey in condition) {\n        if (query[conditionKey]) {\n            if (type_1.isArray(query[conditionKey])) {\n                query[conditionKey].push(condition[conditionKey]);\n            }\n            else if (type_1.isObject(query[conditionKey])) {\n                if (type_1.isObject(condition[conditionKey])) {\n                    Object.assign(query[conditionKey], condition[conditionKey]);\n                }\n                else {\n                    console.warn(`unmergable condition, query is object but condition is ${type_1.getType(condition)}, can only overwrite`, condition, key);\n                    query[conditionKey] = condition[conditionKey];\n                }\n            }\n            else {\n                console.warn(`to-merge query is of type ${type_1.getType(query)}, can only overwrite`, query, condition, key);\n                query[conditionKey] = condition[conditionKey];\n            }\n        }\n        else {\n            query[conditionKey] = condition[conditionKey];\n        }\n    }\n}\nexports.mergeConditionAfterEncode = mergeConditionAfterEncode;\nfunction isConversionRequired(val) {\n    return type_1.isInternalObject(val) || type_1.isDate(val) || type_1.isRegExp(val);\n}\nexports.isConversionRequired = isConversionRequired;\nfunction encodeInternalDataType(val) {\n    return datatype_1.serialize(val);\n}\nexports.encodeInternalDataType = encodeInternalDataType;\nfunction decodeInternalDataType(object) {\n    return datatype_1.deserialize(object);\n}\nexports.decodeInternalDataType = decodeInternalDataType;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst symbol_1 = require(\"../helper/symbol\");\nconst type_1 = require(\"../utils/type\");\nconst geo_1 = require(\"../geo\");\nconst serverDate_1 = require(\"../serverDate\");\nfunction serialize(val) {\n    return serializeHelper(val, [val]);\n}\nexports.serialize = serialize;\nfunction serializeHelper(val, visited) {\n    if (type_1.isInternalObject(val)) {\n        switch (val._internalType) {\n            case symbol_1.SYMBOL_GEO_POINT: {\n                return val.toJSON();\n            }\n            case symbol_1.SYMBOL_SERVER_DATE: {\n                return val.parse();\n            }\n            case symbol_1.SYMBOL_REGEXP: {\n                return val.parse();\n            }\n            default: {\n                return val.toJSON ? val.toJSON() : val;\n            }\n        }\n    }\n    else if (type_1.isDate(val)) {\n        return {\n            $date: +val,\n        };\n    }\n    else if (type_1.isRegExp(val)) {\n        return {\n            $regex: val.source,\n            $options: val.flags,\n        };\n    }\n    else if (type_1.isArray(val)) {\n        return val.map(item => {\n            if (visited.indexOf(item) > -1) {\n                throw new Error(`Cannot convert circular structure to JSON`);\n            }\n            return serializeHelper(item, [\n                ...visited,\n                item,\n            ]);\n        });\n    }\n    else if (type_1.isObject(val)) {\n        const ret = Object.assign({}, val);\n        for (const key in ret) {\n            if (visited.indexOf(ret[key]) > -1) {\n                throw new Error(`Cannot convert circular structure to JSON`);\n            }\n            ret[key] = serializeHelper(ret[key], [\n                ...visited,\n                ret[key],\n            ]);\n        }\n        return ret;\n    }\n    else {\n        return val;\n    }\n}\nfunction deserialize(object) {\n    const ret = Object.assign({}, object);\n    for (const key in ret) {\n        switch (key) {\n            case '$date': {\n                switch (type_1.getType(ret[key])) {\n                    case 'number': {\n                        return new Date(ret[key]);\n                    }\n                    case 'object': {\n                        return new serverDate_1.ServerDate(ret[key]);\n                    }\n                }\n                break;\n            }\n            case 'type': {\n                switch (ret.type) {\n                    case 'Point': {\n                        if (type_1.isArray(ret.coordinates) && type_1.isNumber(ret.coordinates[0]) && type_1.isNumber(ret.coordinates[1])) {\n                            return new geo_1.Point(ret.coordinates[0], ret.coordinates[1]);\n                        }\n                        break;\n                    }\n                }\n                break;\n            }\n        }\n    }\n    return object;\n}\nexports.deserialize = deserialize;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst request_1 = require(\"./request\");\nconst validate_1 = require(\"./validate\");\nconst util_1 = require(\"./util\");\nconst query_1 = require(\"./serializer/query\");\nconst update_1 = require(\"./serializer/update\");\nclass Query {\n    constructor(db, coll, fieldFilters, fieldOrders, queryOptions) {\n        this._db = db;\n        this._coll = coll;\n        this._fieldFilters = fieldFilters;\n        this._fieldOrders = fieldOrders || [];\n        this._queryOptions = queryOptions || {};\n        this._request = new request_1.Request(this._db);\n    }\n    get() {\n        let newOder = [];\n        if (this._fieldOrders) {\n            this._fieldOrders.forEach(order => {\n                newOder.push(order);\n            });\n        }\n        let param = {\n            collectionName: this._coll\n        };\n        if (this._fieldFilters) {\n            param.query = this._fieldFilters;\n        }\n        if (newOder.length > 0) {\n            param.order = newOder;\n        }\n        if (this._queryOptions.offset) {\n            param.offset = this._queryOptions.offset;\n        }\n        if (this._queryOptions.limit) {\n            param.limit =\n                this._queryOptions.limit < 100 ? this._queryOptions.limit : 100;\n        }\n        else {\n            param.limit = 100;\n        }\n        if (this._queryOptions.projection) {\n            param.projection = this._queryOptions.projection;\n        }\n        return new Promise(resolve => {\n            this._request.send(\"queryDocument\", param).then(res => {\n                if (res.code) {\n                    resolve(res);\n                }\n                else {\n                    const documents = util_1.Util.formatResDocumentData(res.data.list);\n                    const result = {\n                        data: documents,\n                        requestId: res.requestId\n                    };\n                    if (res.TotalCount)\n                        result.total = res.TotalCount;\n                    if (res.Limit)\n                        result.limit = res.Limit;\n                    if (res.Offset)\n                        result.offset = res.Offset;\n                    resolve(result);\n                }\n            });\n        });\n    }\n    count() {\n        let param = {\n            collectionName: this._coll\n        };\n        if (this._fieldFilters) {\n            param.query = this._fieldFilters;\n        }\n        return new Promise(resolve => {\n            this._request.send(\"countDocument\", param).then(res => {\n                if (res.code) {\n                    resolve(res);\n                }\n                else {\n                    resolve({\n                        requestId: res.requestId,\n                        total: res.data.total\n                    });\n                }\n            });\n        });\n    }\n    where(query) {\n        return new Query(this._db, this._coll, query_1.QuerySerializer.encode(query), this._fieldOrders, this._queryOptions);\n    }\n    orderBy(fieldPath, directionStr) {\n        validate_1.Validate.isFieldPath(fieldPath);\n        validate_1.Validate.isFieldOrder(directionStr);\n        const newOrder = {\n            field: fieldPath,\n            direction: directionStr\n        };\n        const combinedOrders = this._fieldOrders.concat(newOrder);\n        return new Query(this._db, this._coll, this._fieldFilters, combinedOrders, this._queryOptions);\n    }\n    limit(limit) {\n        validate_1.Validate.isInteger(\"limit\", limit);\n        let option = Object.assign({}, this._queryOptions);\n        option.limit = limit;\n        return new Query(this._db, this._coll, this._fieldFilters, this._fieldOrders, option);\n    }\n    skip(offset) {\n        validate_1.Validate.isInteger(\"offset\", offset);\n        let option = Object.assign({}, this._queryOptions);\n        option.offset = offset;\n        return new Query(this._db, this._coll, this._fieldFilters, this._fieldOrders, option);\n    }\n    update(data) {\n        if (!data || typeof data !== \"object\") {\n            return Promise.resolve({\n                code: \"INVALID_PARAM\",\n                message: \"参数必需是非空对象\"\n            });\n        }\n        if (data.hasOwnProperty(\"_id\")) {\n            return Promise.resolve({\n                code: \"INVALID_PARAM\",\n                message: \"不能更新_id的值\"\n            });\n        }\n        let param = {\n            collectionName: this._coll,\n            query: this._fieldFilters,\n            multi: true,\n            merge: true,\n            upsert: false,\n            data: update_1.UpdateSerializer.encode(data)\n        };\n        return new Promise(resolve => {\n            this._request.send(\"updateDocument\", param).then(res => {\n                if (res.code) {\n                    resolve(res);\n                }\n                else {\n                    resolve({\n                        requestId: res.requestId,\n                        updated: res.data.updated,\n                        upsertId: res.data.upsert_id\n                    });\n                }\n            });\n        });\n    }\n    field(projection) {\n        for (let k in projection) {\n            if (projection[k]) {\n                projection[k] = 1;\n            }\n            else {\n                projection[k] = 0;\n            }\n        }\n        let option = Object.assign({}, this._queryOptions);\n        option.projection = projection;\n        return new Query(this._db, this._coll, this._fieldFilters, this._fieldOrders, option);\n    }\n    remove() {\n        const param = {\n            collectionName: this._coll,\n            query: query_1.QuerySerializer.encode(this._fieldFilters),\n            multi: true\n        };\n        return new Promise(resolve => {\n            this._request.send(\"deleteDocument\", param).then(res => {\n                if (res.code) {\n                    resolve(res);\n                }\n                else {\n                    resolve({\n                        requestId: res.requestId,\n                        deleted: res.data.deleted\n                    });\n                }\n            });\n        });\n    }\n}\nexports.Query = Query;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst query_1 = require(\"../commands/query\");\nconst logic_1 = require(\"../commands/logic\");\nconst symbol_1 = require(\"../helper/symbol\");\nconst type_1 = require(\"../utils/type\");\nconst operator_map_1 = require(\"../operator-map\");\nconst common_1 = require(\"./common\");\nclass QuerySerializer {\n    constructor() {\n    }\n    static encode(query) {\n        const encoder = new QueryEncoder();\n        return encoder.encodeQuery(query);\n    }\n}\nexports.QuerySerializer = QuerySerializer;\nclass QueryEncoder {\n    encodeQuery(query, key) {\n        if (common_1.isConversionRequired(query)) {\n            if (logic_1.isLogicCommand(query)) {\n                return this.encodeLogicCommand(query);\n            }\n            else if (query_1.isQueryCommand(query)) {\n                return this.encodeQueryCommand(query);\n            }\n            else {\n                return { [key]: this.encodeQueryObject(query) };\n            }\n        }\n        else {\n            if (type_1.isObject(query)) {\n                return this.encodeQueryObject(query);\n            }\n            else {\n                return query;\n            }\n        }\n    }\n    encodeLogicCommand(query) {\n        switch (query.operator) {\n            case logic_1.LOGIC_COMMANDS_LITERAL.AND:\n            case logic_1.LOGIC_COMMANDS_LITERAL.OR: {\n                const $op = operator_map_1.operatorToString(query.operator);\n                const subqueries = query.operands.map((oprand) => this.encodeQuery(oprand, query.fieldName));\n                return {\n                    [$op]: subqueries,\n                };\n            }\n            default: {\n                const $op = operator_map_1.operatorToString(query.operator);\n                if (query.operands.length === 1) {\n                    const subquery = this.encodeQuery(query.operands[0]);\n                    return {\n                        [$op]: subquery,\n                    };\n                }\n                else {\n                    const subqueries = query.operands.map(this.encodeQuery.bind(this));\n                    return {\n                        [$op]: subqueries,\n                    };\n                }\n            }\n        }\n    }\n    encodeQueryCommand(query) {\n        if (query_1.isComparisonCommand(query)) {\n            return this.encodeComparisonCommand(query);\n        }\n        else {\n            return this.encodeComparisonCommand(query);\n        }\n    }\n    encodeComparisonCommand(query) {\n        if (query.fieldName === symbol_1.SYMBOL_UNSET_FIELD_NAME) {\n            throw new Error(`Cannot encode a comparison command with unset field name`);\n        }\n        const $op = operator_map_1.operatorToString(query.operator);\n        switch (query.operator) {\n            case query_1.QUERY_COMMANDS_LITERAL.EQ:\n            case query_1.QUERY_COMMANDS_LITERAL.NEQ:\n            case query_1.QUERY_COMMANDS_LITERAL.LT:\n            case query_1.QUERY_COMMANDS_LITERAL.LTE:\n            case query_1.QUERY_COMMANDS_LITERAL.GT:\n            case query_1.QUERY_COMMANDS_LITERAL.GTE: {\n                return {\n                    [query.fieldName]: {\n                        [$op]: common_1.encodeInternalDataType(query.operands[0]),\n                    },\n                };\n            }\n            case query_1.QUERY_COMMANDS_LITERAL.IN:\n            case query_1.QUERY_COMMANDS_LITERAL.NIN: {\n                return {\n                    [query.fieldName]: {\n                        [$op]: common_1.encodeInternalDataType(query.operands),\n                    },\n                };\n            }\n            default: {\n                return {\n                    [query.fieldName]: {\n                        [$op]: common_1.encodeInternalDataType(query.operands[0]),\n                    },\n                };\n            }\n        }\n    }\n    encodeQueryObject(query) {\n        const flattened = common_1.flattenQueryObject(query);\n        for (const key in flattened) {\n            const val = flattened[key];\n            if (logic_1.isLogicCommand(val)) {\n                flattened[key] = val._setFieldName(key);\n                const condition = this.encodeLogicCommand(flattened[key]);\n                this.mergeConditionAfterEncode(flattened, condition, key);\n            }\n            else if (query_1.isComparisonCommand(val)) {\n                flattened[key] = val._setFieldName(key);\n                const condition = this.encodeComparisonCommand(flattened[key]);\n                this.mergeConditionAfterEncode(flattened, condition, key);\n            }\n            else if (common_1.isConversionRequired(val)) {\n                flattened[key] = common_1.encodeInternalDataType(val);\n            }\n        }\n        return flattened;\n    }\n    mergeConditionAfterEncode(query, condition, key) {\n        if (!condition[key]) {\n            delete query[key];\n        }\n        for (const conditionKey in condition) {\n            if (query[conditionKey]) {\n                if (type_1.isArray(query[conditionKey])) {\n                    query[conditionKey].push(condition[conditionKey]);\n                }\n                else if (type_1.isObject(query[conditionKey])) {\n                    if (type_1.isObject(condition[conditionKey])) {\n                        Object.assign(query, condition);\n                    }\n                    else {\n                        console.warn(`unmergable condition, query is object but condition is ${type_1.getType(condition)}, can only overwrite`, condition, key);\n                        query[conditionKey] = condition[conditionKey];\n                    }\n                }\n                else {\n                    console.warn(`to-merge query is of type ${type_1.getType(query)}, can only overwrite`, query, condition, key);\n                    query[conditionKey] = condition[conditionKey];\n                }\n            }\n            else {\n                query[conditionKey] = condition[conditionKey];\n            }\n        }\n    }\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst query_1 = require(\"./commands/query\");\nconst logic_1 = require(\"./commands/logic\");\nconst update_1 = require(\"./commands/update\");\nconst type_1 = require(\"./utils/type\");\nexports.Command = {\n    eq(val) {\n        return new query_1.QueryCommand(query_1.QUERY_COMMANDS_LITERAL.EQ, [val]);\n    },\n    neq(val) {\n        return new query_1.QueryCommand(query_1.QUERY_COMMANDS_LITERAL.NEQ, [val]);\n    },\n    lt(val) {\n        return new query_1.QueryCommand(query_1.QUERY_COMMANDS_LITERAL.LT, [val]);\n    },\n    lte(val) {\n        return new query_1.QueryCommand(query_1.QUERY_COMMANDS_LITERAL.LTE, [val]);\n    },\n    gt(val) {\n        return new query_1.QueryCommand(query_1.QUERY_COMMANDS_LITERAL.GT, [val]);\n    },\n    gte(val) {\n        return new query_1.QueryCommand(query_1.QUERY_COMMANDS_LITERAL.GTE, [val]);\n    },\n    in(val) {\n        return new query_1.QueryCommand(query_1.QUERY_COMMANDS_LITERAL.IN, val);\n    },\n    nin(val) {\n        return new query_1.QueryCommand(query_1.QUERY_COMMANDS_LITERAL.NIN, val);\n    },\n    and(...__expressions__) {\n        const expressions = type_1.isArray(arguments[0]) ? arguments[0] : Array.from(arguments);\n        return new logic_1.LogicCommand(logic_1.LOGIC_COMMANDS_LITERAL.AND, expressions);\n    },\n    or(...__expressions__) {\n        const expressions = type_1.isArray(arguments[0]) ? arguments[0] : Array.from(arguments);\n        return new logic_1.LogicCommand(logic_1.LOGIC_COMMANDS_LITERAL.OR, expressions);\n    },\n    set(val) {\n        return new update_1.UpdateCommand(update_1.UPDATE_COMMANDS_LITERAL.SET, [val]);\n    },\n    remove() {\n        return new update_1.UpdateCommand(update_1.UPDATE_COMMANDS_LITERAL.REMOVE, []);\n    },\n    inc(val) {\n        return new update_1.UpdateCommand(update_1.UPDATE_COMMANDS_LITERAL.INC, [val]);\n    },\n    mul(val) {\n        return new update_1.UpdateCommand(update_1.UPDATE_COMMANDS_LITERAL.MUL, [val]);\n    },\n    push(...__values__) {\n        const values = type_1.isArray(arguments[0]) ? arguments[0] : Array.from(arguments);\n        return new update_1.UpdateCommand(update_1.UPDATE_COMMANDS_LITERAL.PUSH, values);\n    },\n    pop() {\n        return new update_1.UpdateCommand(update_1.UPDATE_COMMANDS_LITERAL.POP, []);\n    },\n    shift() {\n        return new update_1.UpdateCommand(update_1.UPDATE_COMMANDS_LITERAL.SHIFT, []);\n    },\n    unshift(...__values__) {\n        const values = type_1.isArray(arguments[0]) ? arguments[0] : Array.from(arguments);\n        return new update_1.UpdateCommand(update_1.UPDATE_COMMANDS_LITERAL.UNSHIFT, values);\n    },\n};\nexports.default = exports.Command;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst symbol_1 = require(\"../helper/symbol\");\nclass RegExp {\n    constructor({ regexp, options }) {\n        if (!regexp) {\n            throw new TypeError(\"regexp must be a string\");\n        }\n        this.$regex = regexp;\n        this.$options = options;\n    }\n    parse() {\n        return {\n            $regex: this.$regex,\n            $options: this.$options\n        };\n    }\n    get _internalType() {\n        return symbol_1.SYMBOL_REGEXP;\n    }\n}\nexports.RegExp = RegExp;\nfunction RegExpConstructor(param) {\n    return new RegExp(param);\n}\nexports.RegExpConstructor = RegExpConstructor;\n","const httpRequest = require(\"../utils/httpRequest\");\n\n/**\n * 调用云函数\n * @param {String} name  函数名\n * @param {Object} functionParam 函数参数\n * @return {Promise}\n */\nfunction callFunction({ name, data }) {\n  try {\n    data = data ? JSON.stringify(data) : \"\";\n  } catch (e) {\n    return Promise.reject(e);\n  }\n  if (!name) {\n    return Promise.reject(\n      new Error({\n        message: \"函数名不能为空\"\n      })\n    );\n  }\n\n  let params = {\n    action: \"functions.invokeFunction\",\n    function_name: name,\n    request_data: data\n  };\n\n  return httpRequest({\n    config: this.config,\n    params,\n    method: \"post\",\n    headers: {\n      \"content-type\": \"application/json\"\n    }\n  }).then(res => {\n    // console.log(res);\n    if (res.code) {\n      return res;\n    } else {\n      let result = res.data.response_data\n      try {\n        result = JSON.parse(res.data.response_data)\n      } catch (e) { }\n      return {\n        result,\n        requestId: res.requestId\n      };\n    }\n  });\n}\n\nexports.callFunction = callFunction;\n","const httpRequest = require(\"../utils/httpRequest\");\n\nexports.callWxOpenApi = function ({ apiName, requestData } = {}) {\n    try {\n        requestData = requestData ? JSON.stringify(requestData) : \"\";\n    } catch (e) {\n        throw Error(e)\n    }\n\n    const wxCloudApiToken = process.env.WX_API_TOKEN || ''\n\n    let params = {\n        action: \"wx.api\",\n        apiName,\n        requestData,\n        wxCloudApiToken\n    };\n\n    return httpRequest({\n        config: this.config,\n        params,\n        method: \"post\",\n        headers: {\n            \"content-type\": \"application/json\"\n        }\n    }).then(res => {\n        // console.log(res);\n        if (res.code) {\n            return res;\n        } else {\n            let result = res.data.responseData\n            try {\n                result = JSON.parse(res.data.responseData)\n            } catch (e) { }\n            return {\n                result,\n                requestId: res.requestId\n            };\n        }\n    });\n}\n"]}